# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class InvoicesListRequestStatus(str, enum.Enum):
    DRAFT = "DRAFT"
    OPEN = "OPEN"
    PAID = "PAID"
    PARTIALLY_PAID = "PARTIALLY_PAID"
    SUBMITTED = "SUBMITTED"
    VOID = "VOID"

    def visit(
        self,
        draft: typing.Callable[[], T_Result],
        open: typing.Callable[[], T_Result],
        paid: typing.Callable[[], T_Result],
        partially_paid: typing.Callable[[], T_Result],
        submitted: typing.Callable[[], T_Result],
        void: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is InvoicesListRequestStatus.DRAFT:
            return draft()
        if self is InvoicesListRequestStatus.OPEN:
            return open()
        if self is InvoicesListRequestStatus.PAID:
            return paid()
        if self is InvoicesListRequestStatus.PARTIALLY_PAID:
            return partially_paid()
        if self is InvoicesListRequestStatus.SUBMITTED:
            return submitted()
        if self is InvoicesListRequestStatus.VOID:
            return void()
