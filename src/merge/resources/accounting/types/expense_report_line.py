# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.unchecked_base_model import UncheckedBaseModel
from .expense_report_line_account import ExpenseReportLineAccount
from .expense_report_line_company import ExpenseReportLineCompany
from .expense_report_line_contact import ExpenseReportLineContact
from .expense_report_line_employee import ExpenseReportLineEmployee
from .expense_report_line_project import ExpenseReportLineProject
from .expense_report_line_tax_rate import ExpenseReportLineTaxRate
from .remote_field import RemoteField


class ExpenseReportLine(UncheckedBaseModel):
    """
    # The ExpenseReportLine Object
    ### Description
    The `ExpenseReportLine` object represents an individual line item within an expense report, containing details about
    a specific expense such as amount, description, and associated metadata.

    ### Usage Example
    Fetch from the `GET ExpenseReport` endpoint and expand the lines field to view all line items in the expense report.
    """

    id: typing.Optional[str] = None
    remote_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The datetime that this object was modified by Merge.
    """

    account: typing.Optional[ExpenseReportLineAccount] = None
    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the individual expense.
    """

    expense_date: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The date the individual expense was incurred.
    """

    amount: typing.Optional[float] = pydantic.Field(default=None)
    """
    The amount of the expense for the line item.
    """

    currency: typing.Optional[typing.Optional[typing.Any]] = None
    exchange_rate: typing.Optional[str] = pydantic.Field(default=None)
    """
    Exchange rate used if the line item is in a foreign currency.
    """

    is_billable: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the expense line is billable to a client or project.
    """

    tracking_categories: typing.List[str] = pydantic.Field()
    """
    The related tracking categories associated with the expense report (Department, Location, Class, Expense Category)
    """

    employee: typing.Optional[ExpenseReportLineEmployee] = pydantic.Field(default=None)
    """
    Identifier for the employee who submitted or is associated with the expense report
    """

    project: typing.Optional[ExpenseReportLineProject] = None
    company: typing.Optional[ExpenseReportLineCompany] = pydantic.Field(default=None)
    """
    The subsidiary that the expense report is created in
    """

    contact: typing.Optional[ExpenseReportLineContact] = None
    quantity: typing.Optional[float] = pydantic.Field(default=None)
    """
    Quantity for the expense line (e.g., miles driven, items purchased).
    """

    unit_price: typing.Optional[float] = pydantic.Field(default=None)
    """
    Price per unit for the expense line (if applicable).
    """

    non_reimbursable: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the expense line is non-reimbursable (e.g., paid via company card).
    """

    tax_amount: typing.Optional[float] = pydantic.Field(default=None)
    """
    Tax amount applicable for the line item.
    """

    inclusive_of_tax: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the amount is inclusive of tax.
    """

    tax_rate: typing.Optional[ExpenseReportLineTaxRate] = None
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    remote_fields: typing.Optional[typing.List[RemoteField]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
