# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.unchecked_base_model import UncheckedBaseModel
from .purchase_order_line_item_request import PurchaseOrderLineItemRequest
from .purchase_order_request_company import PurchaseOrderRequestCompany
from .purchase_order_request_delivery_address import PurchaseOrderRequestDeliveryAddress
from .purchase_order_request_payment_term import PurchaseOrderRequestPaymentTerm
from .purchase_order_request_status import PurchaseOrderRequestStatus
from .purchase_order_request_tracking_categories_item import PurchaseOrderRequestTrackingCategoriesItem
from .purchase_order_request_vendor import PurchaseOrderRequestVendor
from .remote_field_request import RemoteFieldRequest


class PurchaseOrderRequest(UncheckedBaseModel):
    """
    # The PurchaseOrder Object
    ### Description
    The `PurchaseOrder` object is a record of request for a product or service between a buyer and seller.

    ### Usage Example
    Fetch from the `LIST PurchaseOrders` endpoint and view a company's purchase orders.
    """

    status: typing.Optional[PurchaseOrderRequestStatus] = pydantic.Field(default=None)
    """
    The purchase order's status.
    
    * `DRAFT` - DRAFT
    * `SUBMITTED` - SUBMITTED
    * `AUTHORIZED` - AUTHORIZED
    * `BILLED` - BILLED
    * `DELETED` - DELETED
    """

    issue_date: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The purchase order's issue date.
    """

    delivery_date: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The purchase order's delivery date.
    """

    delivery_address: typing.Optional[PurchaseOrderRequestDeliveryAddress] = pydantic.Field(default=None)
    """
    The purchase order's delivery address.
    """

    customer: typing.Optional[str] = pydantic.Field(default=None)
    """
    The contact making the purchase order.
    """

    vendor: typing.Optional[PurchaseOrderRequestVendor] = pydantic.Field(default=None)
    """
    The party fulfilling the purchase order.
    """

    memo: typing.Optional[str] = pydantic.Field(default=None)
    """
    A memo attached to the purchase order.
    """

    company: typing.Optional[PurchaseOrderRequestCompany] = pydantic.Field(default=None)
    """
    The company the purchase order belongs to.
    """

    total_amount: typing.Optional[float] = pydantic.Field(default=None)
    """
    The purchase order's total amount.
    """

    payment_term: typing.Optional[PurchaseOrderRequestPaymentTerm] = pydantic.Field(default=None)
    """
    The payment term that applies to this transaction.
    """

    currency: typing.Optional[typing.Optional[typing.Any]] = None
    inclusive_of_tax: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If the transaction is inclusive or exclusive of tax. `True` if inclusive, `False` if exclusive.
    """

    exchange_rate: typing.Optional[str] = pydantic.Field(default=None)
    """
    The purchase order's exchange rate.
    """

    tracking_categories: typing.Optional[typing.List[typing.Optional[PurchaseOrderRequestTrackingCategoriesItem]]] = (
        None
    )
    line_items: typing.Optional[typing.List[PurchaseOrderLineItemRequest]] = None
    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    remote_fields: typing.Optional[typing.List[RemoteFieldRequest]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
