# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class FieldTypeEnum(str, enum.Enum):
    """
    - `string` - string
    - `number` - number
    - `date` - date
    - `datetime` - datetime
    - `bool` - bool
    - `list` - list
    """

    STRING = "string"
    NUMBER = "number"
    DATE = "date"
    DATETIME = "datetime"
    BOOL = "bool"
    LIST = "list"

    def visit(
        self,
        string: typing.Callable[[], T_Result],
        number: typing.Callable[[], T_Result],
        date: typing.Callable[[], T_Result],
        datetime: typing.Callable[[], T_Result],
        bool_: typing.Callable[[], T_Result],
        list_: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is FieldTypeEnum.STRING:
            return string()
        if self is FieldTypeEnum.NUMBER:
            return number()
        if self is FieldTypeEnum.DATE:
            return date()
        if self is FieldTypeEnum.DATETIME:
            return datetime()
        if self is FieldTypeEnum.BOOL:
            return bool_()
        if self is FieldTypeEnum.LIST:
            return list_()
