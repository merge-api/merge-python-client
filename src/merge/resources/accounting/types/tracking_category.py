# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .tracking_category_status import TrackingCategoryStatus
from .tracking_category_category_type import TrackingCategoryCategoryType
from .tracking_category_company import TrackingCategoryCompany
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class TrackingCategory(UniversalBaseModel):
    """
    # The TrackingCategory Object

    ### Description

    A `TrackingCategory` object represents a categorization method used to classify transactions within an accounting platform. They are often used to group records for reporting and analysis purposes. The most common types of `TrackingCategories` are Classes and Departments.

    ### Usage Example

    Fetch from the `GET TrackingCategory` endpoint and view a company's tracking category.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    name: typing.Optional[str] = pydantic.Field()
    """
    The tracking category's name.
    """

    status: typing.Optional[TrackingCategoryStatus] = pydantic.Field()
    """
    The tracking category's status.
    
    - `ACTIVE` - ACTIVE
    - `ARCHIVED` - ARCHIVED
    """

    category_type: typing.Optional[TrackingCategoryCategoryType] = pydantic.Field()
    """
    The tracking categoryâ€™s type.
    
    - `CLASS` - CLASS
    - `DEPARTMENT` - DEPARTMENT
    """

    parent_category: typing.Optional[str] = pydantic.Field()
    """
    ID of the parent tracking category.
    """

    company: typing.Optional[TrackingCategoryCompany] = pydantic.Field()
    """
    The company the tracking category belongs to.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
