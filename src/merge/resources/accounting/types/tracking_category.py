# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .remote_data import RemoteData
from .tracking_category_category_type import TrackingCategoryCategoryType
from .tracking_category_company import TrackingCategoryCompany
from .tracking_category_status import TrackingCategoryStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class TrackingCategory(pydantic.BaseModel):
    """
    # The TrackingCategory Object

    ### Description

    A `TrackingCategory` object represents a categorization method used to classify transactions within an accounting platform. They are often used to group records for reporting and analysis purposes. The most common types of `TrackingCategories` are Classes and Departments.

    ### Usage Example

    Fetch from the `GET TrackingCategory` endpoint and view a company's tracking category.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime]
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="This is the datetime that this object was last updated by Merge"
    )
    name: typing.Optional[str] = pydantic.Field(description="The tracking category's name.")
    status: typing.Optional[TrackingCategoryStatus] = pydantic.Field(
        description=("The tracking category's status.\n" "\n" "- `ACTIVE` - ACTIVE\n" "- `ARCHIVED` - ARCHIVED\n")
    )
    category_type: typing.Optional[TrackingCategoryCategoryType] = pydantic.Field(
        description=("The tracking categoryâ€™s type.\n" "\n" "- `CLASS` - CLASS\n" "- `DEPARTMENT` - DEPARTMENT\n")
    )
    parent_category: typing.Optional[str] = pydantic.Field(description="ID of the parent tracking category.")
    company: typing.Optional[TrackingCategoryCompany] = pydantic.Field(
        description="The company the tracking category belongs to."
    )
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(
        description="Indicates whether or not this object has been deleted in the third party platform."
    )
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
