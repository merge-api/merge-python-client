# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .condition_schema_condition_type import ConditionSchemaConditionType
from .operator_schema import OperatorSchema

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ConditionSchema(pydantic.BaseModel):
    id: str = pydantic.Field(
        description="The ID of the condition schema. This ID is used when updating selective syncs for a linked account."
    )
    common_model: typing.Optional[str] = pydantic.Field(
        description="The common model for which a condition schema is defined."
    )
    native_name: typing.Optional[str]
    field_name: typing.Optional[str]
    is_unique: typing.Optional[bool] = pydantic.Field(
        description="Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times."
    )
    condition_type: ConditionSchemaConditionType = pydantic.Field(
        description=(
            "The type of value(s) that can be set for this condition.\n"
            "\n"
            "- `BOOLEAN` - BOOLEAN\n"
            "- `DATE` - DATE\n"
            "- `DATE_TIME` - DATE_TIME\n"
            "- `INTEGER` - INTEGER\n"
            "- `FLOAT` - FLOAT\n"
            "- `STRING` - STRING\n"
            "- `LIST_OF_STRINGS` - LIST_OF_STRINGS\n"
        )
    )
    operators: typing.List[OperatorSchema] = pydantic.Field(
        description="The schemas for the operators that can be used on a condition."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
