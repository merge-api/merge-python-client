# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .bank_feed_transaction_bank_feed_account import BankFeedTransactionBankFeedAccount
from .bank_feed_transaction_credit_or_debit import BankFeedTransactionCreditOrDebit
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class BankFeedTransaction(UniversalBaseModel):
    """
    # The BankFeedTransaction Object

    ### Description

    The `BankFeedTransaction` object is used to represent transactions linked to a bank feed account. This includes details about the transaction such as the date, amount, description, and type.

    ### Usage Example

    Fetch from the `GET BankFeedTransaction` endpoint to view details of a transaction associated with a bank feed account.
    """

    id: typing.Optional[str] = None
    remote_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The datetime that this object was modified by Merge.
    """

    bank_feed_account: typing.Optional[BankFeedTransactionBankFeedAccount] = pydantic.Field(default=None)
    """
    The bank feed account associated with the transaction.
    """

    transaction_date: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The date that the transaction occurred.
    """

    posted_date: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The date the transaction was posted to the bank account.
    """

    amount: typing.Optional[float] = pydantic.Field(default=None)
    """
    The amount of the transaction.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the transaction.
    """

    transaction_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The underlying type of the transaction.
    """

    payee: typing.Optional[str] = pydantic.Field(default=None)
    """
    The person or merchant who initiated the transaction, or alternatively, to whom the transaction was paid.
    """

    credit_or_debit: typing.Optional[BankFeedTransactionCreditOrDebit] = pydantic.Field(default=None)
    """
    If the transaction is of type debit or credit.
    
    - `CREDIT` - CREDIT
    - `DEBIT` - DEBIT
    """

    source_transaction_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The customerâ€™s identifier for the transaction.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    is_processed: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether or not this transaction has been processed by the external system. For example, NetSuite writes this field as True when the SuiteApp has processed the transaction.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
