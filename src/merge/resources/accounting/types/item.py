# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .item_company import ItemCompany
from .item_purchase_account import ItemPurchaseAccount
from .item_sales_account import ItemSalesAccount
from .item_status import ItemStatus
from .remote_data import RemoteData


class Item(pydantic_v1.BaseModel):
    """
    # The Item Object

    ### Description

    The `Item` object refers to the goods involved in a transaction.

    ### Usage Example

    Fetch from the `LIST Items` endpoint and view a company's items.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    name: typing.Optional[str] = pydantic_v1.Field()
    """
    The item's name.
    """

    status: typing.Optional[ItemStatus] = pydantic_v1.Field()
    """
    The item's status.
    
    - `ACTIVE` - ACTIVE
    - `ARCHIVED` - ARCHIVED
    """

    unit_price: typing.Optional[float] = pydantic_v1.Field()
    """
    The item's unit price.
    """

    purchase_price: typing.Optional[float] = pydantic_v1.Field()
    """
    The price at which the item is purchased from a vendor.
    """

    purchase_account: typing.Optional[ItemPurchaseAccount] = pydantic_v1.Field()
    """
    References the default account used to record a purchase of the item.
    """

    sales_account: typing.Optional[ItemSalesAccount] = pydantic_v1.Field()
    """
    References the default account used to record a sale.
    """

    company: typing.Optional[ItemCompany] = pydantic_v1.Field()
    """
    The company the item belongs to.
    """

    remote_updated_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the third party's item note was updated.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic_v1.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform.
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
