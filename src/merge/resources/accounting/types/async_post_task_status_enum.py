# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AsyncPostTaskStatusEnum(str, enum.Enum):
    """
    - `QUEUED` - QUEUED
    - `IN_PROGRESS` - IN_PROGRESS
    - `COMPLETED` - COMPLETED
    - `FAILURE` - FAILURE
    """

    QUEUED = "QUEUED"
    IN_PROGRESS = "IN_PROGRESS"
    COMPLETED = "COMPLETED"
    FAILURE = "FAILURE"

    def visit(
        self,
        queued: typing.Callable[[], T_Result],
        in_progress: typing.Callable[[], T_Result],
        completed: typing.Callable[[], T_Result],
        failure: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is AsyncPostTaskStatusEnum.QUEUED:
            return queued()
        if self is AsyncPostTaskStatusEnum.IN_PROGRESS:
            return in_progress()
        if self is AsyncPostTaskStatusEnum.COMPLETED:
            return completed()
        if self is AsyncPostTaskStatusEnum.FAILURE:
            return failure()
