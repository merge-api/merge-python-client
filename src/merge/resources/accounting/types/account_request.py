# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.unchecked_base_model import UncheckedBaseModel
from .account_request_account_type import AccountRequestAccountType
from .account_request_classification import AccountRequestClassification
from .account_request_status import AccountRequestStatus


class AccountRequest(UncheckedBaseModel):
    """
    # The Account Object
    ### Description
    An `Account` represents a category in a companyâ€™s ledger in which a financial transaction is recorded against. The aggregation of each `Account` object is often referred to as the **Chart of Accounts**.

    An `Account` can be classified into one of the following categories, determined through the `classification` field:
    * __Asset:__ Accounts Receivable and Bank Accounts
    * __Liability:__ Accounts Payable and Credit Card Accounts
    * __Equity:__ Treasury Accounts and Retained Earnings
    * __Revenue:__ Income and Other Income
    * __Expense:__ Cost of Goods Sold and Office Expenses

    ### Usage Example
    Fetch from the `LIST Accounts` endpoint and view a company's accounts.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The account's name.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The account's description.
    """

    classification: typing.Optional[AccountRequestClassification] = pydantic.Field(default=None)
    """
    The account's broadest grouping.
    
    * `ASSET` - ASSET
    * `EQUITY` - EQUITY
    * `EXPENSE` - EXPENSE
    * `LIABILITY` - LIABILITY
    * `REVENUE` - REVENUE
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The account's type is a narrower and more specific grouping within the account's classification.
    """

    account_type: typing.Optional[AccountRequestAccountType] = pydantic.Field(default=None)
    """
    Normalized account type- which is a narrower and more specific grouping within the account's classification.
    
    * `BANK` - BANK
    * `CREDIT_CARD` - CREDIT_CARD
    * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
    * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
    * `FIXED_ASSET` - FIXED_ASSET
    * `OTHER_ASSET` - OTHER_ASSET
    * `OTHER_CURRENT_ASSET` - OTHER_CURRENT_ASSET
    * `OTHER_EXPENSE` - OTHER_EXPENSE
    * `OTHER_INCOME` - OTHER_INCOME
    * `COST_OF_GOODS_SOLD` - COST_OF_GOODS_SOLD
    * `OTHER_CURRENT_LIABILITY` - OTHER_CURRENT_LIABILITY
    * `LONG_TERM_LIABILITY` - LONG_TERM_LIABILITY
    * `NON_POSTING` - NON_POSTING
    """

    status: typing.Optional[AccountRequestStatus] = pydantic.Field(default=None)
    """
    The account's status.
    
    * `ACTIVE` - ACTIVE
    * `PENDING` - PENDING
    * `INACTIVE` - INACTIVE
    """

    current_balance: typing.Optional[float] = pydantic.Field(default=None)
    """
    The account's current balance.
    """

    currency: typing.Optional[typing.Optional[typing.Any]] = None
    account_number: typing.Optional[str] = pydantic.Field(default=None)
    """
    The account's number.
    """

    parent_account: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the parent account.
    """

    company: typing.Optional[str] = pydantic.Field(default=None)
    """
    The company the account belongs to.
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
