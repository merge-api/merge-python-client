# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .accounting_period_status import AccountingPeriodStatus


class AccountingPeriod(UniversalBaseModel):
    """
    # The AccountingPeriod Object

    ### Description

    The `AccountingPeriod` object is used to define a period of time in which events occurred.

    ### Usage Example

    Common models like `Invoice` and `Transaction` will have `AccountingPeriod` objects which will denote when they occurred.
    """

    id: typing.Optional[str]
    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    start_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    Beginning date of the period
    """

    end_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    End date of the period
    """

    status: typing.Optional[AccountingPeriodStatus]
    name: typing.Optional[str] = pydantic.Field()
    """
    Name of the accounting period.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
