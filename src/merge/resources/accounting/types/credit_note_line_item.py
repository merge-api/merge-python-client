# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .credit_note_line_item_company import CreditNoteLineItemCompany
from .credit_note_line_item_item import CreditNoteLineItemItem


class CreditNoteLineItem(pydantic_v1.BaseModel):
    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    item: typing.Optional[CreditNoteLineItemItem]
    name: typing.Optional[str] = pydantic_v1.Field()
    """
    The credit note line item's name.
    """

    description: typing.Optional[str] = pydantic_v1.Field()
    """
    The description of the item that is owed.
    """

    quantity: typing.Optional[str] = pydantic_v1.Field()
    """
    The credit note line item's quantity.
    """

    memo: typing.Optional[str] = pydantic_v1.Field()
    """
    The credit note line item's memo.
    """

    unit_price: typing.Optional[str] = pydantic_v1.Field()
    """
    The credit note line item's unit price.
    """

    total_line_amount: typing.Optional[str] = pydantic_v1.Field()
    """
    The credit note line item's total.
    """

    tracking_category: typing.Optional[str] = pydantic_v1.Field()
    """
    The credit note line item's associated tracking category.
    """

    tracking_categories: typing.List[str] = pydantic_v1.Field()
    """
    The credit note line item's associated tracking categories.
    """

    account: typing.Optional[str] = pydantic_v1.Field()
    """
    The credit note line item's account.
    """

    company: typing.Optional[CreditNoteLineItemCompany] = pydantic_v1.Field()
    """
    The company the credit note belongs to.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic_v1.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
