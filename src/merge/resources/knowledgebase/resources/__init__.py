# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import (
        account_details,
        account_token,
        articles,
        async_passthrough,
        attachments,
        audit_trail,
        available_actions,
        containers,
        delete_account,
        field_mapping,
        force_resync,
        generate_key,
        groups,
        issues,
        link_token,
        linked_accounts,
        passthrough,
        regenerate_key,
        scopes,
        sync_status,
        users,
        webhook_receivers,
    )
    from .articles import ArticlesListRequestExpand, ArticlesRetrieveRequestExpand
    from .async_passthrough import AsyncPassthroughRetrieveResponse
    from .containers import ContainersListRequestExpand, ContainersRetrieveRequestExpand
    from .groups import GroupsListRequestExpand, GroupsRetrieveRequestExpand
    from .issues import IssuesListRequestStatus
    from .link_token import EndUserDetailsRequestLanguage
    from .linked_accounts import LinkedAccountsListRequestCategory
_dynamic_imports: typing.Dict[str, str] = {
    "ArticlesListRequestExpand": ".articles",
    "ArticlesRetrieveRequestExpand": ".articles",
    "AsyncPassthroughRetrieveResponse": ".async_passthrough",
    "ContainersListRequestExpand": ".containers",
    "ContainersRetrieveRequestExpand": ".containers",
    "EndUserDetailsRequestLanguage": ".link_token",
    "GroupsListRequestExpand": ".groups",
    "GroupsRetrieveRequestExpand": ".groups",
    "IssuesListRequestStatus": ".issues",
    "LinkedAccountsListRequestCategory": ".linked_accounts",
    "account_details": ".",
    "account_token": ".",
    "articles": ".",
    "async_passthrough": ".",
    "attachments": ".",
    "audit_trail": ".",
    "available_actions": ".",
    "containers": ".",
    "delete_account": ".",
    "field_mapping": ".",
    "force_resync": ".",
    "generate_key": ".",
    "groups": ".",
    "issues": ".",
    "link_token": ".",
    "linked_accounts": ".",
    "passthrough": ".",
    "regenerate_key": ".",
    "scopes": ".",
    "sync_status": ".",
    "users": ".",
    "webhook_receivers": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ArticlesListRequestExpand",
    "ArticlesRetrieveRequestExpand",
    "AsyncPassthroughRetrieveResponse",
    "ContainersListRequestExpand",
    "ContainersRetrieveRequestExpand",
    "EndUserDetailsRequestLanguage",
    "GroupsListRequestExpand",
    "GroupsRetrieveRequestExpand",
    "IssuesListRequestStatus",
    "LinkedAccountsListRequestCategory",
    "account_details",
    "account_token",
    "articles",
    "async_passthrough",
    "attachments",
    "audit_trail",
    "available_actions",
    "containers",
    "delete_account",
    "field_mapping",
    "force_resync",
    "generate_key",
    "groups",
    "issues",
    "link_token",
    "linked_accounts",
    "passthrough",
    "regenerate_key",
    "scopes",
    "sync_status",
    "users",
    "webhook_receivers",
]
