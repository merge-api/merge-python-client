# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ContainerTypeEnum(str, enum.Enum):
    """
    * `FOLDER` - FOLDER
    * `SPACE` - SPACE
    * `COLLECTION` - COLLECTION
    * `SECTION` - SECTION
    * `CATEGORY` - CATEGORY
    * `DATABASE` - DATABASE
    """

    FOLDER = "FOLDER"
    SPACE = "SPACE"
    COLLECTION = "COLLECTION"
    SECTION = "SECTION"
    CATEGORY = "CATEGORY"
    DATABASE = "DATABASE"

    def visit(
        self,
        folder: typing.Callable[[], T_Result],
        space: typing.Callable[[], T_Result],
        collection: typing.Callable[[], T_Result],
        section: typing.Callable[[], T_Result],
        category: typing.Callable[[], T_Result],
        database: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ContainerTypeEnum.FOLDER:
            return folder()
        if self is ContainerTypeEnum.SPACE:
            return space()
        if self is ContainerTypeEnum.COLLECTION:
            return collection()
        if self is ContainerTypeEnum.SECTION:
            return section()
        if self is ContainerTypeEnum.CATEGORY:
            return category()
        if self is ContainerTypeEnum.DATABASE:
            return database()
