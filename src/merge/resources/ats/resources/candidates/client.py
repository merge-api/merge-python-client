# This file was auto-generated by Fern from our API Definition.

import typing
from .....core.client_wrapper import SyncClientWrapper
from .raw_client import RawCandidatesClient
import datetime as dt
from .types.candidates_list_request_expand import CandidatesListRequestExpand
from .....core.request_options import RequestOptions
from ...types.paginated_candidate_list import PaginatedCandidateList
from ...types.candidate_request import CandidateRequest
from ...types.candidate_response import CandidateResponse
from .types.candidates_retrieve_request_expand import CandidatesRetrieveRequestExpand
from ...types.candidate import Candidate
from ...types.patched_candidate_request import PatchedCandidateRequest
from ...types.reason_enum import ReasonEnum
from ...types.meta_response import MetaResponse
from .....core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawCandidatesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CandidatesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCandidatesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCandidatesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCandidatesClient
        """
        return self._raw_client

    def list(
        self,
        *,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
        email_addresses: typing.Optional[str] = None,
        expand: typing.Optional[CandidatesListRequestExpand] = None,
        first_name: typing.Optional[str] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_shell_data: typing.Optional[bool] = None,
        last_name: typing.Optional[str] = None,
        modified_after: typing.Optional[dt.datetime] = None,
        modified_before: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        remote_id: typing.Optional[str] = None,
        tags: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedCandidateList:
        """
        Returns a list of `Candidate` objects.

        Parameters
        ----------
        created_after : typing.Optional[dt.datetime]
            If provided, will only return objects created after this datetime.

        created_before : typing.Optional[dt.datetime]
            If provided, will only return objects created before this datetime.

        cursor : typing.Optional[str]
            The pagination cursor value.

        email_addresses : typing.Optional[str]
            If provided, will only return candidates with these email addresses; multiple addresses can be separated by commas.

        expand : typing.Optional[CandidatesListRequestExpand]
            Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

        first_name : typing.Optional[str]
            If provided, will only return candidates with this first name.

        include_deleted_data : typing.Optional[bool]
            Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).

        include_remote_data : typing.Optional[bool]
            Whether to include the original data Merge fetched from the third-party to produce these models.

        include_shell_data : typing.Optional[bool]
            Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).

        last_name : typing.Optional[str]
            If provided, will only return candidates with this last name.

        modified_after : typing.Optional[dt.datetime]
            If provided, only objects synced by Merge after this date time will be returned.

        modified_before : typing.Optional[dt.datetime]
            If provided, only objects synced by Merge before this date time will be returned.

        page_size : typing.Optional[int]
            Number of results to return per page.

        remote_id : typing.Optional[str]
            The API provider's ID for the given object.

        tags : typing.Optional[str]
            If provided, will only return candidates with these tags; multiple tags can be separated by commas.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedCandidateList


        Examples
        --------
        from merge import Merge

        client = Merge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )
        client.ats.candidates.list()
        """
        response = self._raw_client.list(
            created_after=created_after,
            created_before=created_before,
            cursor=cursor,
            email_addresses=email_addresses,
            expand=expand,
            first_name=first_name,
            include_deleted_data=include_deleted_data,
            include_remote_data=include_remote_data,
            include_shell_data=include_shell_data,
            last_name=last_name,
            modified_after=modified_after,
            modified_before=modified_before,
            page_size=page_size,
            remote_id=remote_id,
            tags=tags,
            request_options=request_options,
        )
        return response.data

    def create(
        self,
        *,
        model: CandidateRequest,
        remote_user_id: str,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CandidateResponse:
        """
        Creates a `Candidate` object with the given values.

        Parameters
        ----------
        model : CandidateRequest

        remote_user_id : str

        is_debug_mode : typing.Optional[bool]
            Whether to include debug fields (such as log file links) in the response.

        run_async : typing.Optional[bool]
            Whether or not third-party updates should be run asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CandidateResponse


        Examples
        --------
        from merge import Merge
        from merge.resources.ats import CandidateRequest

        client = Merge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )
        client.ats.candidates.create(
            model=CandidateRequest(),
            remote_user_id="remote_user_id",
        )
        """
        response = self._raw_client.create(
            model=model,
            remote_user_id=remote_user_id,
            is_debug_mode=is_debug_mode,
            run_async=run_async,
            request_options=request_options,
        )
        return response.data

    def retrieve(
        self,
        id: str,
        *,
        expand: typing.Optional[CandidatesRetrieveRequestExpand] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_shell_data: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Candidate:
        """
        Returns a `Candidate` object with the given `id`.

        Parameters
        ----------
        id : str

        expand : typing.Optional[CandidatesRetrieveRequestExpand]
            Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

        include_remote_data : typing.Optional[bool]
            Whether to include the original data Merge fetched from the third-party to produce these models.

        include_shell_data : typing.Optional[bool]
            Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Candidate


        Examples
        --------
        from merge import Merge

        client = Merge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )
        client.ats.candidates.retrieve(
            id="id",
        )
        """
        response = self._raw_client.retrieve(
            id,
            expand=expand,
            include_remote_data=include_remote_data,
            include_shell_data=include_shell_data,
            request_options=request_options,
        )
        return response.data

    def partial_update(
        self,
        id: str,
        *,
        model: PatchedCandidateRequest,
        remote_user_id: str,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CandidateResponse:
        """
        Updates a `Candidate` object with the given `id`.

        Parameters
        ----------
        id : str

        model : PatchedCandidateRequest

        remote_user_id : str

        is_debug_mode : typing.Optional[bool]
            Whether to include debug fields (such as log file links) in the response.

        run_async : typing.Optional[bool]
            Whether or not third-party updates should be run asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CandidateResponse


        Examples
        --------
        from merge import Merge
        from merge.resources.ats import PatchedCandidateRequest

        client = Merge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )
        client.ats.candidates.partial_update(
            id="id",
            model=PatchedCandidateRequest(),
            remote_user_id="remote_user_id",
        )
        """
        response = self._raw_client.partial_update(
            id,
            model=model,
            remote_user_id=remote_user_id,
            is_debug_mode=is_debug_mode,
            run_async=run_async,
            request_options=request_options,
        )
        return response.data

    def ignore_create(
        self,
        model_id: str,
        *,
        reason: ReasonEnum,
        message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The "reason" and "message" fields in the request body will be stored for audit purposes.

        Parameters
        ----------
        model_id : str

        reason : ReasonEnum

        message : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from merge import Merge
        from merge.resources.ats import ReasonEnum

        client = Merge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )
        client.ats.candidates.ignore_create(
            model_id="model_id",
            reason=ReasonEnum.GENERAL_CUSTOMER_REQUEST,
        )
        """
        response = self._raw_client.ignore_create(
            model_id, reason=reason, message=message, request_options=request_options
        )
        return response.data

    def meta_patch_retrieve(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> MetaResponse:
        """
        Returns metadata for `Candidate` PATCHs.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetaResponse


        Examples
        --------
        from merge import Merge

        client = Merge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )
        client.ats.candidates.meta_patch_retrieve(
            id="id",
        )
        """
        response = self._raw_client.meta_patch_retrieve(id, request_options=request_options)
        return response.data

    def meta_post_retrieve(self, *, request_options: typing.Optional[RequestOptions] = None) -> MetaResponse:
        """
        Returns metadata for `Candidate` POSTs.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetaResponse


        Examples
        --------
        from merge import Merge

        client = Merge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )
        client.ats.candidates.meta_post_retrieve()
        """
        response = self._raw_client.meta_post_retrieve(request_options=request_options)
        return response.data


class AsyncCandidatesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCandidatesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCandidatesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCandidatesClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
        email_addresses: typing.Optional[str] = None,
        expand: typing.Optional[CandidatesListRequestExpand] = None,
        first_name: typing.Optional[str] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_shell_data: typing.Optional[bool] = None,
        last_name: typing.Optional[str] = None,
        modified_after: typing.Optional[dt.datetime] = None,
        modified_before: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        remote_id: typing.Optional[str] = None,
        tags: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedCandidateList:
        """
        Returns a list of `Candidate` objects.

        Parameters
        ----------
        created_after : typing.Optional[dt.datetime]
            If provided, will only return objects created after this datetime.

        created_before : typing.Optional[dt.datetime]
            If provided, will only return objects created before this datetime.

        cursor : typing.Optional[str]
            The pagination cursor value.

        email_addresses : typing.Optional[str]
            If provided, will only return candidates with these email addresses; multiple addresses can be separated by commas.

        expand : typing.Optional[CandidatesListRequestExpand]
            Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

        first_name : typing.Optional[str]
            If provided, will only return candidates with this first name.

        include_deleted_data : typing.Optional[bool]
            Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).

        include_remote_data : typing.Optional[bool]
            Whether to include the original data Merge fetched from the third-party to produce these models.

        include_shell_data : typing.Optional[bool]
            Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).

        last_name : typing.Optional[str]
            If provided, will only return candidates with this last name.

        modified_after : typing.Optional[dt.datetime]
            If provided, only objects synced by Merge after this date time will be returned.

        modified_before : typing.Optional[dt.datetime]
            If provided, only objects synced by Merge before this date time will be returned.

        page_size : typing.Optional[int]
            Number of results to return per page.

        remote_id : typing.Optional[str]
            The API provider's ID for the given object.

        tags : typing.Optional[str]
            If provided, will only return candidates with these tags; multiple tags can be separated by commas.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedCandidateList


        Examples
        --------
        import asyncio

        from merge import AsyncMerge

        client = AsyncMerge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.ats.candidates.list()


        asyncio.run(main())
        """
        response = await self._raw_client.list(
            created_after=created_after,
            created_before=created_before,
            cursor=cursor,
            email_addresses=email_addresses,
            expand=expand,
            first_name=first_name,
            include_deleted_data=include_deleted_data,
            include_remote_data=include_remote_data,
            include_shell_data=include_shell_data,
            last_name=last_name,
            modified_after=modified_after,
            modified_before=modified_before,
            page_size=page_size,
            remote_id=remote_id,
            tags=tags,
            request_options=request_options,
        )
        return response.data

    async def create(
        self,
        *,
        model: CandidateRequest,
        remote_user_id: str,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CandidateResponse:
        """
        Creates a `Candidate` object with the given values.

        Parameters
        ----------
        model : CandidateRequest

        remote_user_id : str

        is_debug_mode : typing.Optional[bool]
            Whether to include debug fields (such as log file links) in the response.

        run_async : typing.Optional[bool]
            Whether or not third-party updates should be run asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CandidateResponse


        Examples
        --------
        import asyncio

        from merge import AsyncMerge
        from merge.resources.ats import CandidateRequest

        client = AsyncMerge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.ats.candidates.create(
                model=CandidateRequest(),
                remote_user_id="remote_user_id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            model=model,
            remote_user_id=remote_user_id,
            is_debug_mode=is_debug_mode,
            run_async=run_async,
            request_options=request_options,
        )
        return response.data

    async def retrieve(
        self,
        id: str,
        *,
        expand: typing.Optional[CandidatesRetrieveRequestExpand] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_shell_data: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Candidate:
        """
        Returns a `Candidate` object with the given `id`.

        Parameters
        ----------
        id : str

        expand : typing.Optional[CandidatesRetrieveRequestExpand]
            Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

        include_remote_data : typing.Optional[bool]
            Whether to include the original data Merge fetched from the third-party to produce these models.

        include_shell_data : typing.Optional[bool]
            Whether to include shell records. Shell records are empty records (they may contain some metadata but all other fields are null).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Candidate


        Examples
        --------
        import asyncio

        from merge import AsyncMerge

        client = AsyncMerge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.ats.candidates.retrieve(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.retrieve(
            id,
            expand=expand,
            include_remote_data=include_remote_data,
            include_shell_data=include_shell_data,
            request_options=request_options,
        )
        return response.data

    async def partial_update(
        self,
        id: str,
        *,
        model: PatchedCandidateRequest,
        remote_user_id: str,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CandidateResponse:
        """
        Updates a `Candidate` object with the given `id`.

        Parameters
        ----------
        id : str

        model : PatchedCandidateRequest

        remote_user_id : str

        is_debug_mode : typing.Optional[bool]
            Whether to include debug fields (such as log file links) in the response.

        run_async : typing.Optional[bool]
            Whether or not third-party updates should be run asynchronously.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CandidateResponse


        Examples
        --------
        import asyncio

        from merge import AsyncMerge
        from merge.resources.ats import PatchedCandidateRequest

        client = AsyncMerge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.ats.candidates.partial_update(
                id="id",
                model=PatchedCandidateRequest(),
                remote_user_id="remote_user_id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.partial_update(
            id,
            model=model,
            remote_user_id=remote_user_id,
            is_debug_mode=is_debug_mode,
            run_async=run_async,
            request_options=request_options,
        )
        return response.data

    async def ignore_create(
        self,
        model_id: str,
        *,
        reason: ReasonEnum,
        message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The "reason" and "message" fields in the request body will be stored for audit purposes.

        Parameters
        ----------
        model_id : str

        reason : ReasonEnum

        message : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from merge import AsyncMerge
        from merge.resources.ats import ReasonEnum

        client = AsyncMerge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.ats.candidates.ignore_create(
                model_id="model_id",
                reason=ReasonEnum.GENERAL_CUSTOMER_REQUEST,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.ignore_create(
            model_id, reason=reason, message=message, request_options=request_options
        )
        return response.data

    async def meta_patch_retrieve(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MetaResponse:
        """
        Returns metadata for `Candidate` PATCHs.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetaResponse


        Examples
        --------
        import asyncio

        from merge import AsyncMerge

        client = AsyncMerge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.ats.candidates.meta_patch_retrieve(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.meta_patch_retrieve(id, request_options=request_options)
        return response.data

    async def meta_post_retrieve(self, *, request_options: typing.Optional[RequestOptions] = None) -> MetaResponse:
        """
        Returns metadata for `Candidate` POSTs.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetaResponse


        Examples
        --------
        import asyncio

        from merge import AsyncMerge

        client = AsyncMerge(
            account_token="YOUR_ACCOUNT_TOKEN",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.ats.candidates.meta_post_retrieve()


        asyncio.run(main())
        """
        response = await self._raw_client.meta_post_retrieve(request_options=request_options)
        return response.data
