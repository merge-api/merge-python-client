# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .job_interview_stage_job import JobInterviewStageJob
from .remote_data import RemoteData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class JobInterviewStage(pydantic.BaseModel):
    """
    # The JobInterviewStage Object

    ### Description

    The `JobInterviewStage` object is used to represent a particular recruiting stage for an `Application`. A given `Application` typically has the `JobInterviewStage` object represented in the current_stage field.

    ### Usage Example

    Fetch from the `LIST JobInterviewStages` endpoint and view the job interview stages used by a company.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime]
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="This is the datetime that this object was last updated by Merge"
    )
    name: typing.Optional[str] = pydantic.Field(
        description="Standard stage names are offered by ATS systems but can be modified by users."
    )
    job: typing.Optional[JobInterviewStageJob] = pydantic.Field(
        description="This field is populated only if the stage is specific to a particular job. If the stage is generic, this field will not be populated."
    )
    stage_order: typing.Optional[int] = pydantic.Field(
        description="The stageâ€™s order, with the lowest values ordered first. If the third-party does not return details on the order of stages, this field will not be populated."
    )
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(
        description="Indicates whether or not this object has been deleted in the third party platform."
    )
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
