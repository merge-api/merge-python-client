# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .screening_question_answer_request_question import ScreeningQuestionAnswerRequestQuestion
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class ScreeningQuestionAnswerRequest(UniversalBaseModel):
    """
    # The ScreeningQuestionAnswer Object

    ### Description

    The `ScreeningQuestionAnswer` object is used to represent candidate responses to a screening question, for a specific application.

    ### Usage Example

    TODO
    """

    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    question: typing.Optional[ScreeningQuestionAnswerRequestQuestion] = pydantic.Field()
    """
    The screening question associated with the candidate’s answer. To determine the data type of the answer, you can expand on the screening question by adding `screening_question_answers.question` to the `expand` query parameter.
    """

    answer: typing.Optional[str] = pydantic.Field()
    """
    The candidate’s response to the screening question.
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
