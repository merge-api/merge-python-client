# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .remote_data import RemoteData
from .scheduled_interview_application import ScheduledInterviewApplication
from .scheduled_interview_interviewers_item import ScheduledInterviewInterviewersItem
from .scheduled_interview_job_interview_stage import ScheduledInterviewJobInterviewStage
from .scheduled_interview_organizer import ScheduledInterviewOrganizer
from .scheduled_interview_status import ScheduledInterviewStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ScheduledInterview(pydantic.BaseModel):
    """
    # The ScheduledInterview Object

    ### Description

    The `ScheduledInterview` object is used to represent a scheduled interview for a given candidateâ€™s application to a job. An `Application` can have multiple `ScheduledInterview`s depending on the particular hiring process.

    ### Usage Example

    Fetch from the `LIST ScheduledInterviews` endpoint and filter by `interviewers` to show all office locations.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime]
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="This is the datetime that this object was last updated by Merge"
    )
    application: typing.Optional[ScheduledInterviewApplication] = pydantic.Field(
        description="The application being interviewed."
    )
    job_interview_stage: typing.Optional[ScheduledInterviewJobInterviewStage] = pydantic.Field(
        description="The stage of the interview."
    )
    organizer: typing.Optional[ScheduledInterviewOrganizer] = pydantic.Field(
        description="The user organizing the interview."
    )
    interviewers: typing.Optional[typing.List[typing.Optional[ScheduledInterviewInterviewersItem]]] = pydantic.Field(
        description="Array of `RemoteUser` IDs."
    )
    location: typing.Optional[str] = pydantic.Field(description="The interview's location.")
    start_at: typing.Optional[dt.datetime] = pydantic.Field(description="When the interview was started.")
    end_at: typing.Optional[dt.datetime] = pydantic.Field(description="When the interview was ended.")
    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's interview was created."
    )
    remote_updated_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's interview was updated."
    )
    status: typing.Optional[ScheduledInterviewStatus] = pydantic.Field(
        description=(
            "The interview's status.\n"
            "\n"
            "- `SCHEDULED` - SCHEDULED\n"
            "- `AWAITING_FEEDBACK` - AWAITING_FEEDBACK\n"
            "- `COMPLETE` - COMPLETE\n"
        )
    )
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(
        description="Indicates whether or not this object has been deleted in the third party platform."
    )
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
