# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .application import Application
from .candidate import Candidate
from .offer import Offer
import typing
from .application_request_candidate import ApplicationRequestCandidate
import pydantic
from .application_request_job import ApplicationRequestJob
import datetime as dt
from .application_request_offers_item import ApplicationRequestOffersItem
from .application_request_credited_to import ApplicationRequestCreditedTo
from .application_request_screening_question_answers_item import ApplicationRequestScreeningQuestionAnswersItem
from .application_request_current_stage import ApplicationRequestCurrentStage
from .application_request_reject_reason import ApplicationRequestRejectReason
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class ApplicationRequest(UniversalBaseModel):
    """
    # The Application Object

    ### Description

    The Application Object is used to represent a candidate's journey through a particular Job's recruiting process. If a Candidate applies for multiple Jobs, there will be a separate Application for each Job if the third-party integration allows it.

    ### Usage Example

    Fetch from the `LIST Applications` endpoint and filter by `ID` to show all applications.
    """

    candidate: typing.Optional[ApplicationRequestCandidate] = pydantic.Field()
    """
    The candidate applying.
    """

    job: typing.Optional[ApplicationRequestJob] = pydantic.Field()
    """
    The job being applied for.
    """

    applied_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the application was submitted.
    """

    rejected_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the application was rejected.
    """

    offers: typing.Optional[typing.List[typing.Optional[ApplicationRequestOffersItem]]]
    source: typing.Optional[str] = pydantic.Field()
    """
    The application's source.
    """

    credited_to: typing.Optional[ApplicationRequestCreditedTo] = pydantic.Field()
    """
    The user credited for this application.
    """

    screening_question_answers: typing.Optional[typing.List[ApplicationRequestScreeningQuestionAnswersItem]]
    current_stage: typing.Optional[ApplicationRequestCurrentStage] = pydantic.Field()
    """
    The application's current stage.
    """

    reject_reason: typing.Optional[ApplicationRequestRejectReason] = pydantic.Field()
    """
    The application's reason for rejection.
    """

    remote_template_id: typing.Optional[str]
    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Application, ApplicationRequest=ApplicationRequest)
update_forward_refs(Candidate, ApplicationRequest=ApplicationRequest)
update_forward_refs(Offer, ApplicationRequest=ApplicationRequest)
