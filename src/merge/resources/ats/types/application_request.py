# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .application_request_candidate import ApplicationRequestCandidate
from .application_request_credited_to import ApplicationRequestCreditedTo
from .application_request_current_stage import ApplicationRequestCurrentStage
from .application_request_job import ApplicationRequestJob
from .application_request_offers_item import ApplicationRequestOffersItem
from .application_request_reject_reason import ApplicationRequestRejectReason


class ApplicationRequest(pydantic_v1.BaseModel):
    """
    # The Application Object

    ### Description

    The Application Object is used to represent a candidate's journey through a particular Job's recruiting process. If a Candidate applies for multiple Jobs, there will be a separate Application for each Job if the third-party integration allows it.

    ### Usage Example

    Fetch from the `LIST Applications` endpoint and filter by `ID` to show all applications.
    """

    candidate: typing.Optional[ApplicationRequestCandidate] = pydantic_v1.Field()
    """
    The candidate applying.
    """

    job: typing.Optional[ApplicationRequestJob] = pydantic_v1.Field()
    """
    The job being applied for.
    """

    applied_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the application was submitted.
    """

    rejected_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the application was rejected.
    """

    offers: typing.Optional[typing.List[typing.Optional[ApplicationRequestOffersItem]]]
    source: typing.Optional[str] = pydantic_v1.Field()
    """
    The application's source.
    """

    credited_to: typing.Optional[ApplicationRequestCreditedTo] = pydantic_v1.Field()
    """
    The user credited for this application.
    """

    current_stage: typing.Optional[ApplicationRequestCurrentStage] = pydantic_v1.Field()
    """
    The application's current stage.
    """

    reject_reason: typing.Optional[ApplicationRequestRejectReason] = pydantic_v1.Field()
    """
    The application's reason for rejection.
    """

    remote_template_id: typing.Optional[str]
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
