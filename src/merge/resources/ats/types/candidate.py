# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .phone_number import PhoneNumber
from .email_address import EmailAddress
from .url import Url
from .candidate_attachments_item import CandidateAttachmentsItem
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class Candidate(UniversalBaseModel):
    """
    # The Candidate Object

    ### Description

    The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.

    ### Usage Example

    Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    first_name: typing.Optional[str] = pydantic.Field()
    """
    The candidate's first name.
    """

    last_name: typing.Optional[str] = pydantic.Field()
    """
    The candidate's last name.
    """

    company: typing.Optional[str] = pydantic.Field()
    """
    The candidate's current company.
    """

    title: typing.Optional[str] = pydantic.Field()
    """
    The candidate's current title.
    """

    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the third party's candidate was created.
    """

    remote_updated_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the third party's candidate was updated.
    """

    last_interaction_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the most recent interaction with the candidate occurred.
    """

    is_private: typing.Optional[bool] = pydantic.Field()
    """
    Whether or not the candidate is private.
    """

    can_email: typing.Optional[bool] = pydantic.Field()
    """
    Whether or not the candidate can be emailed.
    """

    locations: typing.Optional[typing.List[typing.Optional[str]]] = pydantic.Field()
    """
    The candidate's locations.
    """

    phone_numbers: typing.Optional[typing.List[PhoneNumber]]
    email_addresses: typing.Optional[typing.List[EmailAddress]]
    urls: typing.Optional[typing.List[Url]]
    tags: typing.Optional[typing.List[typing.Optional[str]]] = pydantic.Field()
    """
    Array of `Tag` names as strings.
    """

    applications: typing.Optional[typing.List[typing.Optional["CandidateApplicationsItem"]]] = pydantic.Field()
    """
    Array of `Application` object IDs.
    """

    attachments: typing.Optional[typing.List[typing.Optional[CandidateAttachmentsItem]]] = pydantic.Field()
    """
    Array of `Attachment` object IDs.
    """

    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .application import Application  # noqa: E402
from .offer import Offer  # noqa: E402
from .candidate_applications_item import CandidateApplicationsItem  # noqa: E402

update_forward_refs(Application, Candidate=Candidate)
update_forward_refs(Offer, Candidate=Candidate)
update_forward_refs(Candidate)
