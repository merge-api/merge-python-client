# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .email_address_request_email_address_type import EmailAddressRequestEmailAddressType
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class EmailAddressRequest(UniversalBaseModel):
    """
    # The EmailAddress Object

    ### Description

    The `EmailAddress` object is used to represent a candidate's email address.

    ### Usage Example

    Fetch from the `GET Candidate` endpoint and view their email addresses.
    """

    value: typing.Optional[str] = pydantic.Field(default=None)
    """
    The email address.
    """

    email_address_type: typing.Optional[EmailAddressRequestEmailAddressType] = pydantic.Field(default=None)
    """
    The type of email address.
    
    - `PERSONAL` - PERSONAL
    - `WORK` - WORK
    - `OTHER` - OTHER
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
