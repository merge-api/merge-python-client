# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .application import Application
from .candidate import Candidate
from .offer import Offer
import typing
import pydantic
import datetime as dt
from .phone_number_request import PhoneNumberRequest
from .email_address_request import EmailAddressRequest
from .url_request import UrlRequest
from .candidate_request_applications_item import CandidateRequestApplicationsItem
from .candidate_request_attachments_item import CandidateRequestAttachmentsItem
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class CandidateRequest(UniversalBaseModel):
    """
    # The Candidate Object

    ### Description

    The `Candidate` object is used to represent profile information about a given Candidate. Because it is specific to a Candidate, this information stays constant across applications.

    ### Usage Example

    Fetch from the `LIST Candidates` endpoint and filter by `ID` to show all candidates.
    """

    first_name: typing.Optional[str] = pydantic.Field()
    """
    The candidate's first name.
    """

    last_name: typing.Optional[str] = pydantic.Field()
    """
    The candidate's last name.
    """

    company: typing.Optional[str] = pydantic.Field()
    """
    The candidate's current company.
    """

    title: typing.Optional[str] = pydantic.Field()
    """
    The candidate's current title.
    """

    last_interaction_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the most recent interaction with the candidate occurred.
    """

    is_private: typing.Optional[bool] = pydantic.Field()
    """
    Whether or not the candidate is private.
    """

    can_email: typing.Optional[bool] = pydantic.Field()
    """
    Whether or not the candidate can be emailed.
    """

    locations: typing.Optional[typing.List[typing.Optional[str]]] = pydantic.Field()
    """
    The candidate's locations.
    """

    phone_numbers: typing.Optional[typing.List[PhoneNumberRequest]]
    email_addresses: typing.Optional[typing.List[EmailAddressRequest]]
    urls: typing.Optional[typing.List[UrlRequest]]
    tags: typing.Optional[typing.List[typing.Optional[str]]] = pydantic.Field()
    """
    Array of `Tag` names as strings.
    """

    applications: typing.Optional[typing.List[typing.Optional[CandidateRequestApplicationsItem]]] = pydantic.Field()
    """
    Array of `Application` object IDs.
    """

    attachments: typing.Optional[typing.List[typing.Optional[CandidateRequestAttachmentsItem]]] = pydantic.Field()
    """
    Array of `Attachment` object IDs.
    """

    remote_template_id: typing.Optional[str]
    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Application, CandidateRequest=CandidateRequest)
update_forward_refs(Candidate, CandidateRequest=CandidateRequest)
update_forward_refs(Offer, CandidateRequest=CandidateRequest)
