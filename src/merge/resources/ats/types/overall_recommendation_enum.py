# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class OverallRecommendationEnum(str, enum.Enum):
    """
    * `DEFINITELY_NO` - DEFINITELY_NO
    * `NO` - NO
    * `YES` - YES
    * `STRONG_YES` - STRONG_YES
    * `NO_DECISION` - NO_DECISION
    """

    DEFINITELY_NO = "DEFINITELY_NO"
    NO = "NO"
    YES = "YES"
    STRONG_YES = "STRONG_YES"
    NO_DECISION = "NO_DECISION"

    def visit(
        self,
        definitely_no: typing.Callable[[], T_Result],
        no: typing.Callable[[], T_Result],
        yes: typing.Callable[[], T_Result],
        strong_yes: typing.Callable[[], T_Result],
        no_decision: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is OverallRecommendationEnum.DEFINITELY_NO:
            return definitely_no()
        if self is OverallRecommendationEnum.NO:
            return no()
        if self is OverallRecommendationEnum.YES:
            return yes()
        if self is OverallRecommendationEnum.STRONG_YES:
            return strong_yes()
        if self is OverallRecommendationEnum.NO_DECISION:
            return no_decision()
