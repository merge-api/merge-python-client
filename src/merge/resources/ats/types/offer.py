# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .offer_creator import OfferCreator
from .offer_status import OfferStatus
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class Offer(UniversalBaseModel):
    """
    # The Offer Object

    ### Description

    The `Offer` object is used to represent an offer for a candidate's application specific to a job.

    ### Usage Example

    Fetch from the `LIST Offers` endpoint and filter by `ID` to show all offers.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    application: typing.Optional["OfferApplication"] = pydantic.Field()
    """
    The application who is receiving the offer.
    """

    creator: typing.Optional[OfferCreator] = pydantic.Field()
    """
    The user who created the offer.
    """

    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the third party's offer was created.
    """

    closed_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the offer was closed.
    """

    sent_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the offer was sent.
    """

    start_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The employment start date on the offer.
    """

    status: typing.Optional[OfferStatus] = pydantic.Field()
    """
    The offer's status.
    
    - `DRAFT` - DRAFT
    - `APPROVAL-SENT` - APPROVAL-SENT
    - `APPROVED` - APPROVED
    - `SENT` - SENT
    - `SENT-MANUALLY` - SENT-MANUALLY
    - `OPENED` - OPENED
    - `DENIED` - DENIED
    - `SIGNED` - SIGNED
    - `DEPRECATED` - DEPRECATED
    """

    remote_was_deleted: typing.Optional[bool] = pydantic.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .application import Application  # noqa: E402
from .candidate import Candidate  # noqa: E402
from .offer_application import OfferApplication  # noqa: E402

update_forward_refs(Application, Offer=Offer)
update_forward_refs(Candidate, Offer=Offer)
update_forward_refs(Offer)
