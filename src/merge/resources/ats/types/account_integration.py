# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .categories_enum import CategoriesEnum


class AccountIntegration(pydantic.BaseModel):
    name: str = pydantic.Field(description="Company name.")
    categories: typing.Optional[typing.List[CategoriesEnum]] = pydantic.Field(
        description="Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris]."
    )
    image: typing.Optional[str] = pydantic.Field(
        description="Company logo in rectangular shape. <b>Upload an image with a clear background.</b>"
    )
    square_image: typing.Optional[str] = pydantic.Field(
        description="Company logo in square shape. <b>Upload an image with a white background.</b>"
    )
    color: typing.Optional[str] = pydantic.Field(
        description='The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b> <span style="white-space: nowrap">`<= 18 characters`</span> '
    )
    slug: typing.Optional[str]
    is_in_beta: typing.Optional[bool] = pydantic.Field(
        description="If checked, this integration will not appear in the linking flow, and will appear elsewhere with a Beta tag."
    )
    api_endpoints_to_documentation_urls: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
