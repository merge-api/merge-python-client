# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
from .external_target_field_api import ExternalTargetFieldApi
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class ExternalTargetFieldApiResponse(UniversalBaseModel):
    activity: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Activity", default=None)
    application: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(
        alias="Application", default=None
    )
    attachment: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Attachment", default=None)
    candidate: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Candidate", default=None)
    department: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Department", default=None)
    eeoc: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="EEOC", default=None)
    scheduled_interview: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(
        alias="ScheduledInterview", default=None
    )
    job: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Job", default=None)
    job_posting: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="JobPosting", default=None)
    job_interview_stage: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(
        alias="JobInterviewStage", default=None
    )
    offer: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Offer", default=None)
    office: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Office", default=None)
    reject_reason: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(
        alias="RejectReason", default=None
    )
    scorecard: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Scorecard", default=None)
    tag: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="Tag", default=None)
    remote_user: typing.Optional[typing.List[ExternalTargetFieldApi]] = pydantic.Field(alias="RemoteUser", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
