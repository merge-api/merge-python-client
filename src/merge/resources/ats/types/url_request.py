# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .url_request_url_type import UrlRequestUrlType


class UrlRequest(pydantic_v1.BaseModel):
    """
    # The Url Object

    ### Description

    The `Url` object is used to represent hyperlinks associated with the parent model.

    ### Usage Example

    Fetch from the `GET Candidate` endpoint and view their website urls.
    """

    value: typing.Optional[str] = pydantic_v1.Field()
    """
    The site's url.
    """

    url_type: typing.Optional[UrlRequestUrlType] = pydantic_v1.Field()
    """
    The type of site.
    
    - `PERSONAL` - PERSONAL
    - `COMPANY` - COMPANY
    - `PORTFOLIO` - PORTFOLIO
    - `BLOG` - BLOG
    - `SOCIAL_MEDIA` - SOCIAL_MEDIA
    - `OTHER` - OTHER
    - `JOB_POSTING` - JOB_POSTING
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
