# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .activity_request_activity_type import ActivityRequestActivityType
from .activity_request_user import ActivityRequestUser
from .activity_request_visibility import ActivityRequestVisibility


class ActivityRequest(pydantic_v1.BaseModel):
    """
    # The Activity Object

    ### Description

    The `Activity` object is used to represent an activity for a candidate performed by a user.

    ### Usage Example

    Fetch from the `LIST Activities` endpoint and filter by `ID` to show all activities.
    """

    user: typing.Optional[ActivityRequestUser] = pydantic_v1.Field()
    """
    The user that performed the action.
    """

    activity_type: typing.Optional[ActivityRequestActivityType] = pydantic_v1.Field()
    """
    The activity's type.
    
    - `NOTE` - NOTE
    - `EMAIL` - EMAIL
    - `OTHER` - OTHER
    """

    subject: typing.Optional[str] = pydantic_v1.Field()
    """
    The activity's subject.
    """

    body: typing.Optional[str] = pydantic_v1.Field()
    """
    The activity's body.
    """

    visibility: typing.Optional[ActivityRequestVisibility] = pydantic_v1.Field()
    """
    The activity's visibility.
    
    - `ADMIN_ONLY` - ADMIN_ONLY
    - `PUBLIC` - PUBLIC
    - `PRIVATE` - PRIVATE
    """

    candidate: typing.Optional[str] = pydantic_v1.Field()
    """
    The activityâ€™s candidate.
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
