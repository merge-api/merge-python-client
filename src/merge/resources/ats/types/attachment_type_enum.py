# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AttachmentTypeEnum(str, enum.Enum):
    """
    * `RESUME` - RESUME
    * `COVER_LETTER` - COVER_LETTER
    * `OFFER_LETTER` - OFFER_LETTER
    * `OTHER` - OTHER
    """

    RESUME = "RESUME"
    COVER_LETTER = "COVER_LETTER"
    OFFER_LETTER = "OFFER_LETTER"
    OTHER = "OTHER"

    def visit(
        self,
        resume: typing.Callable[[], T_Result],
        cover_letter: typing.Callable[[], T_Result],
        offer_letter: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is AttachmentTypeEnum.RESUME:
            return resume()
        if self is AttachmentTypeEnum.COVER_LETTER:
            return cover_letter()
        if self is AttachmentTypeEnum.OFFER_LETTER:
            return offer_letter()
        if self is AttachmentTypeEnum.OTHER:
            return other()
