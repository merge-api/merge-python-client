# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AccessRoleEnum(str, enum.Enum):
    """
    * `SUPER_ADMIN` - SUPER_ADMIN
    * `ADMIN` - ADMIN
    * `TEAM_MEMBER` - TEAM_MEMBER
    * `LIMITED_TEAM_MEMBER` - LIMITED_TEAM_MEMBER
    * `INTERVIEWER` - INTERVIEWER
    """

    SUPER_ADMIN = "SUPER_ADMIN"
    ADMIN = "ADMIN"
    TEAM_MEMBER = "TEAM_MEMBER"
    LIMITED_TEAM_MEMBER = "LIMITED_TEAM_MEMBER"
    INTERVIEWER = "INTERVIEWER"

    def visit(
        self,
        super_admin: typing.Callable[[], T_Result],
        admin: typing.Callable[[], T_Result],
        team_member: typing.Callable[[], T_Result],
        limited_team_member: typing.Callable[[], T_Result],
        interviewer: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is AccessRoleEnum.SUPER_ADMIN:
            return super_admin()
        if self is AccessRoleEnum.ADMIN:
            return admin()
        if self is AccessRoleEnum.TEAM_MEMBER:
            return team_member()
        if self is AccessRoleEnum.LIMITED_TEAM_MEMBER:
            return limited_team_member()
        if self is AccessRoleEnum.INTERVIEWER:
            return interviewer()
