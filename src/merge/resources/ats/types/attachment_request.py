# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .attachment_request_attachment_type import AttachmentRequestAttachmentType


class AttachmentRequest(pydantic.BaseModel):
    """
    # The Attachment Object
    ### Description
    The `Attachment` object is used to represent a file attached to a candidate.
    ### Usage Example
    Fetch from the `LIST Attachments` endpoint and view attachments accessible by a company.
    """

    file_name: typing.Optional[str] = pydantic.Field(description="The attachment's name.")
    file_url: typing.Optional[str] = pydantic.Field(description="The attachment's url.")
    candidate: typing.Optional[str] = pydantic.Field(description="")
    attachment_type: typing.Optional[AttachmentRequestAttachmentType] = pydantic.Field(
        description=(
            "The attachment's type.\n"
            "\n"
            "* `RESUME` - RESUME\n"
            "* `COVER_LETTER` - COVER_LETTER\n"
            "* `OFFER_LETTER` - OFFER_LETTER\n"
            "* `OTHER` - OTHER\n"
        )
    )
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
