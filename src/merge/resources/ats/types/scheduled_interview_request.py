# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .scheduled_interview_request_application import ScheduledInterviewRequestApplication
from .scheduled_interview_request_interviewers_item import ScheduledInterviewRequestInterviewersItem
from .scheduled_interview_request_job_interview_stage import ScheduledInterviewRequestJobInterviewStage
from .scheduled_interview_request_organizer import ScheduledInterviewRequestOrganizer
from .scheduled_interview_request_status import ScheduledInterviewRequestStatus


class ScheduledInterviewRequest(pydantic_v1.BaseModel):
    """
    # The ScheduledInterview Object

    ### Description

    The `ScheduledInterview` object is used to represent a scheduled interview for a given candidateâ€™s application to a job. An `Application` can have multiple `ScheduledInterview`s depending on the particular hiring process.

    ### Usage Example

    Fetch from the `LIST ScheduledInterviews` endpoint and filter by `interviewers` to show all office locations.
    """

    application: typing.Optional[ScheduledInterviewRequestApplication] = pydantic_v1.Field()
    """
    The application being interviewed.
    """

    job_interview_stage: typing.Optional[ScheduledInterviewRequestJobInterviewStage] = pydantic_v1.Field()
    """
    The stage of the interview.
    """

    organizer: typing.Optional[ScheduledInterviewRequestOrganizer] = pydantic_v1.Field()
    """
    The user organizing the interview.
    """

    interviewers: typing.Optional[
        typing.List[typing.Optional[ScheduledInterviewRequestInterviewersItem]]
    ] = pydantic_v1.Field()
    """
    Array of `RemoteUser` IDs.
    """

    location: typing.Optional[str] = pydantic_v1.Field()
    """
    The interview's location.
    """

    start_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the interview was started.
    """

    end_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the interview was ended.
    """

    status: typing.Optional[ScheduledInterviewRequestStatus] = pydantic_v1.Field()
    """
    The interview's status.
    
    - `SCHEDULED` - SCHEDULED
    - `AWAITING_FEEDBACK` - AWAITING_FEEDBACK
    - `COMPLETE` - COMPLETE
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
