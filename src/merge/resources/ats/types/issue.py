# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .issue_status import IssueStatus


class Issue(pydantic.BaseModel):
    id: typing.Optional[str]
    status: typing.Optional[IssueStatus] = pydantic.Field(
        description=(
            "Status of the issue. Options: ('ONGOING', 'RESOLVED')\n"
            "\n"
            "* `ONGOING` - ONGOING\n"
            "* `RESOLVED` - RESOLVED\n"
        )
    )
    error_description: str
    end_user: typing.Optional[typing.Dict[str, typing.Any]]
    first_incident_time: typing.Optional[dt.datetime]
    last_incident_time: typing.Optional[dt.datetime]
    is_muted: typing.Optional[bool]
    error_details: typing.Optional[typing.List[str]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
