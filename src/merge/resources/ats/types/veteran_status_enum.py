# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class VeteranStatusEnum(str, enum.Enum):
    """
    * `I_AM_NOT_A_PROTECTED_VETERAN` - I_AM_NOT_A_PROTECTED_VETERAN
    * `I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN` - I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
    * `I_DONT_WISH_TO_ANSWER` - I_DONT_WISH_TO_ANSWER
    """

    I_AM_NOT_A_PROTECTED_VETERAN = "I_AM_NOT_A_PROTECTED_VETERAN"
    I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN = (
        "I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN"
    )
    I_DONT_WISH_TO_ANSWER = "I_DONT_WISH_TO_ANSWER"

    def visit(
        self,
        i_am_not_a_protected_veteran: typing.Callable[[], T_Result],
        i_identify_as_one_or_more_of_the_classifications_of_a_protected_veteran: typing.Callable[[], T_Result],
        i_dont_wish_to_answer: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is VeteranStatusEnum.I_AM_NOT_A_PROTECTED_VETERAN:
            return i_am_not_a_protected_veteran()
        if self is VeteranStatusEnum.I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN:
            return i_identify_as_one_or_more_of_the_classifications_of_a_protected_veteran()
        if self is VeteranStatusEnum.I_DONT_WISH_TO_ANSWER:
            return i_dont_wish_to_answer()
