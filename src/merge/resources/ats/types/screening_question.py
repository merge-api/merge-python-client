# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .screening_question_job import ScreeningQuestionJob
from .screening_question_type import ScreeningQuestionType


class ScreeningQuestion(pydantic_v1.BaseModel):
    """
    # The ScreeningQuestion Object

    ### Description

    The `ScreeningQuestion` object is used to represent questions asked to screen candidates for a job.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    job: typing.Optional[ScreeningQuestionJob] = pydantic_v1.Field()
    """
    The job associated with the screening question.
    """

    description: typing.Optional[str] = pydantic_v1.Field()
    """
    The description of the screening question
    """

    title: typing.Optional[str] = pydantic_v1.Field()
    """
    The title of the screening question
    """

    type: typing.Optional[ScreeningQuestionType] = pydantic_v1.Field()
    """
    The data type for the screening question.
    
    - `DATE` - DATE
    - `FILE` - FILE
    - `SINGLE_SELECT` - SINGLE_SELECT
    - `MULTI_SELECT` - MULTI_SELECT
    - `SINGLE_LINE_TEXT` - SINGLE_LINE_TEXT
    - `MULTI_LINE_TEXT` - MULTI_LINE_TEXT
    - `NUMERIC` - NUMERIC
    - `BOOLEAN` - BOOLEAN
    """

    required: typing.Optional[bool] = pydantic_v1.Field()
    """
    Whether or not the screening question is required.
    """

    options: typing.Optional[typing.List[typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
