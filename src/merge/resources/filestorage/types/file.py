# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .file_drive import FileDrive
from .file_folder import FileFolder
from .file_permissions import FilePermissions

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class File(pydantic.BaseModel):
    """
    # The File Object

    ### Description

    The `File` object is used to represent a file in the workspace. The Object typically exists under a folder or drive, if it exists.

    ### Usage Example

    Fetch from the `GET /api/filestorage/v1/files` endpoint and view their files.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime]
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="This is the datetime that this object was last updated by Merge"
    )
    name: typing.Optional[str] = pydantic.Field(description="The file's name.")
    file_url: typing.Optional[str] = pydantic.Field(description="The URL to access the file.")
    file_thumbnail_url: typing.Optional[str] = pydantic.Field(
        description="The URL that produces a thumbnail preview of the file. Typically an image."
    )
    size: typing.Optional[int] = pydantic.Field(description="The file's size, in bytes.")
    mime_type: typing.Optional[str] = pydantic.Field(description="The file's mime type.")
    description: typing.Optional[str] = pydantic.Field(description="The file's description.")
    folder: typing.Optional[FileFolder] = pydantic.Field(description="The folder that the file belongs to.")
    permissions: typing.Optional[FilePermissions] = pydantic.Field(
        description="The Permission object is used to represent a user's or group's access to a File or Folder. Permissions are unexpanded by default. Use the query param `expand=permissions` to see more details under `GET /files`."
    )
    drive: typing.Optional[FileDrive] = pydantic.Field(description="The drive that the file belongs to.")
    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's file was created."
    )
    remote_updated_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's file was updated."
    )
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(
        description="Indicates whether or not this object has been deleted in the third party platform."
    )
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[typing.Optional[typing.Dict[str, typing.Any]]]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
