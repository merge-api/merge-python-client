# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .permission_request_group import PermissionRequestGroup
from .permission_request_roles_item import PermissionRequestRolesItem
from .permission_request_type import PermissionRequestType
from .permission_request_user import PermissionRequestUser


class PermissionRequest(pydantic_v1.BaseModel):
    """
    # The Permission Object

    ### Description

    The Permission object is used to represent a user's or group's access to a File or Folder. Permissions are unexpanded by default.

    ### Usage Example

    Fetch from the `GET Files` or `GET Folders` endpoint. Permissions are unexpanded by default. Use the query param `expand=permissions` to see more details.
    """

    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    user: typing.Optional[PermissionRequestUser] = pydantic_v1.Field()
    """
    The user that is granted this permission.
    """

    group: typing.Optional[PermissionRequestGroup] = pydantic_v1.Field()
    """
    The group that is granted this permission.
    """

    type: typing.Optional[PermissionRequestType] = pydantic_v1.Field()
    """
    Denotes what type of people have access to the file.
    
    - `USER` - USER
    - `GROUP` - GROUP
    - `COMPANY` - COMPANY
    - `ANYONE` - ANYONE
    """

    roles: typing.Optional[typing.List[typing.Optional[PermissionRequestRolesItem]]] = pydantic_v1.Field()
    """
    The permissions that the user or group has for the File or Folder. It is possible for a user or group to have multiple roles, such as viewing & uploading. Possible values include: `READ`, `WRITE`, `OWNER`. In cases where there is no clear mapping, the original value passed through will be returned.
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
