# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .permission_request_user import PermissionRequestUser
from .permission_request_group import PermissionRequestGroup
from .permission_request_type import PermissionRequestType
from .permission_request_roles_item import PermissionRequestRolesItem
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class PermissionRequest(UniversalBaseModel):
    """
    # The Permission Object

    ### Description

    The Permission object is used to represent a user's or group's access to a File or Folder. Permissions are unexpanded by default.

    ### Usage Example

    Fetch from the `GET Files` or `GET Folders` endpoint. Permissions are unexpanded by default. Use the query param `expand=permissions` to see more details.
    """

    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    user: typing.Optional[PermissionRequestUser] = pydantic.Field()
    """
    The user that is granted this permission.
    """

    group: typing.Optional[PermissionRequestGroup] = pydantic.Field()
    """
    The group that is granted this permission.
    """

    type: typing.Optional[PermissionRequestType] = pydantic.Field()
    """
    Denotes what type of people have access to the file.
    
    - `USER` - USER
    - `GROUP` - GROUP
    - `COMPANY` - COMPANY
    - `ANYONE` - ANYONE
    """

    roles: typing.Optional[typing.List[typing.Optional[PermissionRequestRolesItem]]] = pydantic.Field()
    """
    The permissions that the user or group has for the File or Folder. It is possible for a user or group to have multiple roles, such as viewing & uploading. Possible values include: `READ`, `WRITE`, `OWNER`. In cases where there is no clear mapping, the original value passed through will be returned.
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
