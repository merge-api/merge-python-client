# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .permission_user import PermissionUser
from .permission_group import PermissionGroup
from .permission_type import PermissionType
from .permission_roles_item import PermissionRolesItem
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class Permission(UniversalBaseModel):
    """
    # The Permission Object

    ### Description

    The Permission object is used to represent a user's or group's access to a File or Folder. Permissions are unexpanded by default.

    ### Usage Example

    Fetch from the `GET Files` or `GET Folders` endpoint. Permissions are unexpanded by default. Use the query param `expand=permissions` to see more details.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    user: typing.Optional[PermissionUser] = pydantic.Field()
    """
    The user that is granted this permission.
    """

    group: typing.Optional[PermissionGroup] = pydantic.Field()
    """
    The group that is granted this permission.
    """

    type: typing.Optional[PermissionType] = pydantic.Field()
    """
    Denotes what type of people have access to the file.
    
    - `USER` - USER
    - `GROUP` - GROUP
    - `COMPANY` - COMPANY
    - `ANYONE` - ANYONE
    """

    roles: typing.Optional[typing.List[typing.Optional[PermissionRolesItem]]] = pydantic.Field()
    """
    The permissions that the user or group has for the File or Folder. It is possible for a user or group to have multiple roles, such as viewing & uploading. Possible values include: `READ`, `WRITE`, `OWNER`. In cases where there is no clear mapping, the original value passed through will be returned.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
