# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
from .raw_client import RawFilestorageClient
from .resources.account_details.client import AccountDetailsClient
from .resources.account_token.client import AccountTokenClient
from .resources.async_passthrough.client import (
    AsyncPassthroughClient as resources_filestorage_resources_async_passthrough_client_AsyncPassthroughClient,
)
from .resources.audit_trail.client import AuditTrailClient
from .resources.available_actions.client import AvailableActionsClient
from .resources.scopes.client import ScopesClient
from .resources.delete_account.client import DeleteAccountClient
from .resources.drives.client import DrivesClient
from .resources.field_mapping.client import FieldMappingClient
from .resources.files.client import FilesClient
from .resources.folders.client import FoldersClient
from .resources.generate_key.client import GenerateKeyClient
from .resources.groups.client import GroupsClient
from .resources.issues.client import IssuesClient
from .resources.link_token.client import LinkTokenClient
from .resources.linked_accounts.client import LinkedAccountsClient
from .resources.passthrough.client import PassthroughClient
from .resources.regenerate_key.client import RegenerateKeyClient
from .resources.sync_status.client import SyncStatusClient
from .resources.force_resync.client import ForceResyncClient
from .resources.users.client import UsersClient
from .resources.webhook_receivers.client import WebhookReceiversClient
from ...core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawFilestorageClient
from .resources.account_details.client import AsyncAccountDetailsClient
from .resources.account_token.client import AsyncAccountTokenClient
from .resources.async_passthrough.client import AsyncAsyncPassthroughClient
from .resources.audit_trail.client import AsyncAuditTrailClient
from .resources.available_actions.client import AsyncAvailableActionsClient
from .resources.scopes.client import AsyncScopesClient
from .resources.delete_account.client import AsyncDeleteAccountClient
from .resources.drives.client import AsyncDrivesClient
from .resources.field_mapping.client import AsyncFieldMappingClient
from .resources.files.client import AsyncFilesClient
from .resources.folders.client import AsyncFoldersClient
from .resources.generate_key.client import AsyncGenerateKeyClient
from .resources.groups.client import AsyncGroupsClient
from .resources.issues.client import AsyncIssuesClient
from .resources.link_token.client import AsyncLinkTokenClient
from .resources.linked_accounts.client import AsyncLinkedAccountsClient
from .resources.passthrough.client import (
    AsyncPassthroughClient as resources_filestorage_resources_passthrough_client_AsyncPassthroughClient,
)
from .resources.regenerate_key.client import AsyncRegenerateKeyClient
from .resources.sync_status.client import AsyncSyncStatusClient
from .resources.force_resync.client import AsyncForceResyncClient
from .resources.users.client import AsyncUsersClient
from .resources.webhook_receivers.client import AsyncWebhookReceiversClient


class FilestorageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFilestorageClient(client_wrapper=client_wrapper)
        self.account_details = AccountDetailsClient(client_wrapper=client_wrapper)

        self.account_token = AccountTokenClient(client_wrapper=client_wrapper)

        self.async_passthrough = resources_filestorage_resources_async_passthrough_client_AsyncPassthroughClient(
            client_wrapper=client_wrapper
        )

        self.audit_trail = AuditTrailClient(client_wrapper=client_wrapper)

        self.available_actions = AvailableActionsClient(client_wrapper=client_wrapper)

        self.scopes = ScopesClient(client_wrapper=client_wrapper)

        self.delete_account = DeleteAccountClient(client_wrapper=client_wrapper)

        self.drives = DrivesClient(client_wrapper=client_wrapper)

        self.field_mapping = FieldMappingClient(client_wrapper=client_wrapper)

        self.files = FilesClient(client_wrapper=client_wrapper)

        self.folders = FoldersClient(client_wrapper=client_wrapper)

        self.generate_key = GenerateKeyClient(client_wrapper=client_wrapper)

        self.groups = GroupsClient(client_wrapper=client_wrapper)

        self.issues = IssuesClient(client_wrapper=client_wrapper)

        self.link_token = LinkTokenClient(client_wrapper=client_wrapper)

        self.linked_accounts = LinkedAccountsClient(client_wrapper=client_wrapper)

        self.passthrough = PassthroughClient(client_wrapper=client_wrapper)

        self.regenerate_key = RegenerateKeyClient(client_wrapper=client_wrapper)

        self.sync_status = SyncStatusClient(client_wrapper=client_wrapper)

        self.force_resync = ForceResyncClient(client_wrapper=client_wrapper)

        self.users = UsersClient(client_wrapper=client_wrapper)

        self.webhook_receivers = WebhookReceiversClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFilestorageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFilestorageClient
        """
        return self._raw_client


class AsyncFilestorageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFilestorageClient(client_wrapper=client_wrapper)
        self.account_details = AsyncAccountDetailsClient(client_wrapper=client_wrapper)

        self.account_token = AsyncAccountTokenClient(client_wrapper=client_wrapper)

        self.async_passthrough = AsyncAsyncPassthroughClient(client_wrapper=client_wrapper)

        self.audit_trail = AsyncAuditTrailClient(client_wrapper=client_wrapper)

        self.available_actions = AsyncAvailableActionsClient(client_wrapper=client_wrapper)

        self.scopes = AsyncScopesClient(client_wrapper=client_wrapper)

        self.delete_account = AsyncDeleteAccountClient(client_wrapper=client_wrapper)

        self.drives = AsyncDrivesClient(client_wrapper=client_wrapper)

        self.field_mapping = AsyncFieldMappingClient(client_wrapper=client_wrapper)

        self.files = AsyncFilesClient(client_wrapper=client_wrapper)

        self.folders = AsyncFoldersClient(client_wrapper=client_wrapper)

        self.generate_key = AsyncGenerateKeyClient(client_wrapper=client_wrapper)

        self.groups = AsyncGroupsClient(client_wrapper=client_wrapper)

        self.issues = AsyncIssuesClient(client_wrapper=client_wrapper)

        self.link_token = AsyncLinkTokenClient(client_wrapper=client_wrapper)

        self.linked_accounts = AsyncLinkedAccountsClient(client_wrapper=client_wrapper)

        self.passthrough = resources_filestorage_resources_passthrough_client_AsyncPassthroughClient(
            client_wrapper=client_wrapper
        )

        self.regenerate_key = AsyncRegenerateKeyClient(client_wrapper=client_wrapper)

        self.sync_status = AsyncSyncStatusClient(client_wrapper=client_wrapper)

        self.force_resync = AsyncForceResyncClient(client_wrapper=client_wrapper)

        self.users = AsyncUsersClient(client_wrapper=client_wrapper)

        self.webhook_receivers = AsyncWebhookReceiversClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFilestorageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFilestorageClient
        """
        return self._raw_client
