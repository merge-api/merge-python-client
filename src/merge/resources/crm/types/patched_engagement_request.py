# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .patched_engagement_request_direction import PatchedEngagementRequestDirection
from .remote_field_request import RemoteFieldRequest


class PatchedEngagementRequest(pydantic.BaseModel):
    """
    # The Engagement Object
    ### Description
    The `Engagement` object is used to represent an interaction noted in a CRM system.
    ### Usage Example
    TODO
    """

    owner: typing.Optional[str] = pydantic.Field(description="The engagement's owner.")
    content: typing.Optional[str] = pydantic.Field(description="The engagement's content.")
    subject: typing.Optional[str] = pydantic.Field(description="The engagement's subject.")
    direction: typing.Optional[PatchedEngagementRequestDirection] = pydantic.Field(
        description=("The engagement's direction.\n" "\n" "* `INBOUND` - INBOUND\n" "* `OUTBOUND` - OUTBOUND\n")
    )
    engagement_type: typing.Optional[str] = pydantic.Field(description="The engagement type of the engagement.")
    start_time: typing.Optional[dt.datetime] = pydantic.Field(description="The time at which the engagement started.")
    end_time: typing.Optional[dt.datetime] = pydantic.Field(description="The time at which the engagement ended.")
    account: typing.Optional[str] = pydantic.Field(description="The account of the engagement.")
    contacts: typing.Optional[typing.List[typing.Optional[str]]]
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]
    remote_fields: typing.Optional[typing.List[RemoteFieldRequest]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
