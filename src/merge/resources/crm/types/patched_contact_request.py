# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .address_request import AddressRequest
from .email_address_request import EmailAddressRequest
from .phone_number_request import PhoneNumberRequest
from .remote_field_request import RemoteFieldRequest


class PatchedContactRequest(pydantic.BaseModel):
    """
    # The Contact Object
    ### Description
    The `Contact` object is used to represent an existing point of contact at a company in a CRM system.
    ### Usage Example
    TODO
    """

    first_name: typing.Optional[str] = pydantic.Field(description="The contact's first name.")
    last_name: typing.Optional[str] = pydantic.Field(description="The contact's last name.")
    account: typing.Optional[str] = pydantic.Field(description="The contact's account.")
    addresses: typing.Optional[typing.List[AddressRequest]]
    email_addresses: typing.Optional[typing.List[EmailAddressRequest]]
    phone_numbers: typing.Optional[typing.List[PhoneNumberRequest]]
    last_activity_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the contact's last activity occurred."
    )
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]
    remote_fields: typing.Optional[typing.List[RemoteFieldRequest]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
