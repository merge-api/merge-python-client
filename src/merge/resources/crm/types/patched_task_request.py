# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .patched_task_request_status import PatchedTaskRequestStatus
from .remote_field_request import RemoteFieldRequest


class PatchedTaskRequest(UniversalBaseModel):
    """
    # The Task Object

    ### Description

    The `Task` object is used to represent a task, such as a to-do item.

    ### Usage Example

    TODO
    """

    subject: typing.Optional[str] = pydantic.Field()
    """
    The task's subject.
    """

    content: typing.Optional[str] = pydantic.Field()
    """
    The task's content.
    """

    owner: typing.Optional[str] = pydantic.Field()
    """
    The task's owner.
    """

    account: typing.Optional[str] = pydantic.Field()
    """
    The task's account.
    """

    opportunity: typing.Optional[str] = pydantic.Field()
    """
    The task's opportunity.
    """

    completed_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the task is completed.
    """

    due_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the task is due.
    """

    status: typing.Optional[PatchedTaskRequestStatus] = pydantic.Field()
    """
    The task's status.
    
    - `OPEN` - OPEN
    - `CLOSED` - CLOSED
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]
    remote_fields: typing.Optional[typing.List[RemoteFieldRequest]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
