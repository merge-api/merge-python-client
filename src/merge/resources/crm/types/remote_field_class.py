# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .item_schema import ItemSchema
from .remote_field_class_field_choices_item import RemoteFieldClassFieldChoicesItem
from .remote_field_class_field_format import RemoteFieldClassFieldFormat
from .remote_field_class_field_type import RemoteFieldClassFieldType


class RemoteFieldClass(pydantic_v1.BaseModel):
    id: typing.Optional[str]
    display_name: typing.Optional[str]
    remote_key_name: typing.Optional[str]
    description: typing.Optional[str]
    is_custom: typing.Optional[bool]
    is_required: typing.Optional[bool]
    field_type: typing.Optional[RemoteFieldClassFieldType]
    field_format: typing.Optional[RemoteFieldClassFieldFormat]
    field_choices: typing.Optional[typing.List[RemoteFieldClassFieldChoicesItem]]
    item_schema: typing.Optional[ItemSchema]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
