# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .opportunity_account import OpportunityAccount
from .opportunity_owner import OpportunityOwner
from .opportunity_stage import OpportunityStage
from .opportunity_status import OpportunityStatus
from .remote_data import RemoteData
from .remote_field import RemoteField


class Opportunity(pydantic_v1.BaseModel):
    """
    # The Opportunity Object

    ### Description

    The `Opportunity` object is used to represent a deal opportunity in a CRM system.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    name: typing.Optional[str] = pydantic_v1.Field()
    """
    The opportunity's name.
    """

    description: typing.Optional[str] = pydantic_v1.Field()
    """
    The opportunity's description.
    """

    amount: typing.Optional[int] = pydantic_v1.Field()
    """
    The opportunity's amount.
    """

    owner: typing.Optional[OpportunityOwner] = pydantic_v1.Field()
    """
    The opportunity's owner.
    """

    account: typing.Optional[OpportunityAccount] = pydantic_v1.Field()
    """
    The account of the opportunity.
    """

    stage: typing.Optional[OpportunityStage] = pydantic_v1.Field()
    """
    The stage of the opportunity.
    """

    status: typing.Optional[OpportunityStatus] = pydantic_v1.Field()
    """
    The opportunity's status.
    
    - `OPEN` - OPEN
    - `WON` - WON
    - `LOST` - LOST
    """

    last_activity_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the opportunity's last activity occurred.
    """

    close_date: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the opportunity was closed.
    """

    remote_created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the third party's opportunity was created.
    """

    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]
    remote_fields: typing.Optional[typing.List[RemoteField]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
