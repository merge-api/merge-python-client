# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .note_owner import NoteOwner
from .note_contact import NoteContact
from .note_account import NoteAccount
from .note_opportunity import NoteOpportunity
from .remote_data import RemoteData
from .remote_field import RemoteField
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class Note(UniversalBaseModel):
    """
    # The Note Object

    ### Description

    The `Note` object is used to represent a note on another object.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    owner: typing.Optional[NoteOwner] = pydantic.Field()
    """
    The note's owner.
    """

    content: typing.Optional[str] = pydantic.Field()
    """
    The note's content.
    """

    contact: typing.Optional[NoteContact] = pydantic.Field()
    """
    The note's contact.
    """

    account: typing.Optional[NoteAccount] = pydantic.Field()
    """
    The note's account.
    """

    opportunity: typing.Optional[NoteOpportunity] = pydantic.Field()
    """
    The note's opportunity.
    """

    remote_updated_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the third party's lead was updated.
    """

    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the third party's lead was created.
    """

    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]
    remote_fields: typing.Optional[typing.List[RemoteField]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
