# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .remote_data import RemoteData
from .remote_field import RemoteField
from .task_account import TaskAccount
from .task_opportunity import TaskOpportunity
from .task_owner import TaskOwner
from .task_status import TaskStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Task(pydantic.BaseModel):
    """
    # The Task Object

    ### Description

    The `Task` object is used to represent a task, such as a to-do item.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was created by Merge."
    )
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was modified by Merge."
    )
    subject: typing.Optional[str] = pydantic.Field(description="The task's subject.")
    content: typing.Optional[str] = pydantic.Field(description="The task's content.")
    owner: typing.Optional[TaskOwner] = pydantic.Field(description="The task's owner.")
    account: typing.Optional[TaskAccount] = pydantic.Field(description="The task's account.")
    opportunity: typing.Optional[TaskOpportunity] = pydantic.Field(description="The task's opportunity.")
    completed_date: typing.Optional[dt.datetime] = pydantic.Field(description="When the task is completed.")
    due_date: typing.Optional[dt.datetime] = pydantic.Field(description="When the task is due.")
    status: typing.Optional[TaskStatus] = pydantic.Field(
        description=("The task's status.\n" "\n" "- `OPEN` - OPEN\n" "- `CLOSED` - CLOSED\n")
    )
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(
        description="Indicates whether or not this object has been deleted in the third party platform."
    )
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]
    remote_fields: typing.Optional[typing.List[RemoteField]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
