# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .association_sub_type import AssociationSubType
from .association_type_cardinality import AssociationTypeCardinality
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class AssociationType(UniversalBaseModel):
    """
    # The AssociationType Object

    ### Description

    The `Association Type` object represents the relationship between two objects.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    source_object_class: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field()
    """
    The class of the source object (Custom Object or Common Model) for the association type.
    """

    target_object_classes: typing.Optional[typing.List[AssociationSubType]]
    remote_key_name: typing.Optional[str]
    display_name: typing.Optional[str]
    cardinality: typing.Optional[AssociationTypeCardinality]
    is_required: typing.Optional[bool]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
