# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .note_request_account import NoteRequestAccount
from .note_request_contact import NoteRequestContact
from .note_request_opportunity import NoteRequestOpportunity
from .note_request_owner import NoteRequestOwner
from .remote_field_request import RemoteFieldRequest


class NoteRequest(pydantic.BaseModel):
    """
    # The Note Object
    ### Description
    The `Note` object is used to represent a note on another object.
    ### Usage Example
    TODO
    """

    owner: typing.Optional[NoteRequestOwner] = pydantic.Field(description="The note's owner.")
    content: typing.Optional[str] = pydantic.Field(description="The note's content.")
    contact: typing.Optional[NoteRequestContact] = pydantic.Field(description="The note's contact.")
    account: typing.Optional[NoteRequestAccount] = pydantic.Field(description="The note's account.")
    opportunity: typing.Optional[NoteRequestOpportunity] = pydantic.Field(description="The note's opportunity.")
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]
    remote_fields: typing.Optional[typing.List[RemoteFieldRequest]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
