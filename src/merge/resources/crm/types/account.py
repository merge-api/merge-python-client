# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .account_owner import AccountOwner
from .address import Address
from .phone_number import PhoneNumber
from .remote_data import RemoteData
from .remote_field import RemoteField

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Account(pydantic.BaseModel):
    """
    # The Account Object

    ### Description

    The `Account` object is used to represent a company in a CRM system.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was created by Merge."
    )
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was modified by Merge."
    )
    owner: typing.Optional[AccountOwner] = pydantic.Field(description="The account's owner.")
    name: typing.Optional[str] = pydantic.Field(description="The account's name.")
    description: typing.Optional[str] = pydantic.Field(description="The account's description.")
    industry: typing.Optional[str] = pydantic.Field(description="The account's industry.")
    website: typing.Optional[str] = pydantic.Field(description="The account's website.")
    number_of_employees: typing.Optional[int] = pydantic.Field(description="The account's number of employees.")
    addresses: typing.Optional[typing.List[Address]]
    phone_numbers: typing.Optional[typing.List[PhoneNumber]]
    last_activity_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The last date (either most recent or furthest in the future) of when an activity occurs in an account."
    )
    remote_updated_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the CRM system account data was last modified by a user with a login."
    )
    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's account was created."
    )
    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]
    remote_fields: typing.Optional[typing.List[RemoteField]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
