# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .address import Address
from .email_address import EmailAddress
from .lead_converted_account import LeadConvertedAccount
from .lead_converted_contact import LeadConvertedContact
from .lead_owner import LeadOwner
from .phone_number import PhoneNumber
from .remote_data import RemoteData
from .remote_field import RemoteField

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Lead(pydantic.BaseModel):
    """
    # The Lead Object

    ### Description

    The `Lead` object is used to represent an individual who is a potential customer.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime]
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="This is the datetime that this object was last updated by Merge"
    )
    owner: typing.Optional[LeadOwner] = pydantic.Field(description="The lead's owner.")
    lead_source: typing.Optional[str] = pydantic.Field(description="The lead's source.")
    title: typing.Optional[str] = pydantic.Field(description="The lead's title.")
    company: typing.Optional[str] = pydantic.Field(description="The lead's company.")
    first_name: typing.Optional[str] = pydantic.Field(description="The lead's first name.")
    last_name: typing.Optional[str] = pydantic.Field(description="The lead's last name.")
    addresses: typing.Optional[typing.List[Address]]
    email_addresses: typing.Optional[typing.List[EmailAddress]]
    phone_numbers: typing.Optional[typing.List[PhoneNumber]]
    remote_updated_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's lead was updated."
    )
    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's lead was created."
    )
    converted_date: typing.Optional[dt.datetime] = pydantic.Field(description="When the lead was converted.")
    converted_contact: typing.Optional[LeadConvertedContact] = pydantic.Field(
        description="The contact of the converted lead."
    )
    converted_account: typing.Optional[LeadConvertedAccount] = pydantic.Field(
        description="The account of the converted lead."
    )
    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]
    remote_fields: typing.Optional[typing.List[RemoteField]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
