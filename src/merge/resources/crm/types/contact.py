# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .address import Address
from .contact_account import ContactAccount
from .contact_owner import ContactOwner
from .email_address import EmailAddress
from .phone_number import PhoneNumber
from .remote_data import RemoteData
from .remote_field import RemoteField


class Contact(pydantic_v1.BaseModel):
    """
    # The Contact Object

    ### Description

    The `Contact` object is used to represent an existing point of contact at a company in a CRM system.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    first_name: typing.Optional[str] = pydantic_v1.Field()
    """
    The contact's first name.
    """

    last_name: typing.Optional[str] = pydantic_v1.Field()
    """
    The contact's last name.
    """

    account: typing.Optional[ContactAccount] = pydantic_v1.Field()
    """
    The contact's account.
    """

    owner: typing.Optional[ContactOwner] = pydantic_v1.Field()
    """
    The contact's owner.
    """

    addresses: typing.Optional[typing.List[Address]]
    email_addresses: typing.Optional[typing.List[EmailAddress]]
    phone_numbers: typing.Optional[typing.List[PhoneNumber]]
    last_activity_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the contact's last activity occurred.
    """

    remote_created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the third party's contact was created.
    """

    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]
    remote_fields: typing.Optional[typing.List[RemoteField]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
