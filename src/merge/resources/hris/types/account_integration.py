# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .categories_enum import CategoriesEnum

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AccountIntegration(pydantic.BaseModel):
    name: str = pydantic.Field(description="Company name.")
    categories: typing.Optional[typing.List[CategoriesEnum]] = pydantic.Field(
        description="Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris]."
    )
    image: typing.Optional[str] = pydantic.Field(
        description="Company logo in rectangular shape. <b>Upload an image with a clear background.</b>"
    )
    square_image: typing.Optional[str] = pydantic.Field(
        description="Company logo in square shape. <b>Upload an image with a white background.</b>"
    )
    color: typing.Optional[str] = pydantic.Field(
        description="The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b>"
    )
    slug: typing.Optional[str]
    api_endpoints_to_documentation_urls: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Mapping of API endpoints to documentation urls for support. Example: {'GET': [['/common-model-scopes', 'https://docs.merge.dev/accounting/common-model-scopes/#common_model_scopes_retrieve'],['/common-model-actions', 'https://docs.merge.dev/accounting/common-model-actions/#common_model_actions_retrieve']], 'POST': []}"
    )
    webhook_setup_guide_url: typing.Optional[str] = pydantic.Field(
        description="Setup guide URL for third party webhook creation. Exposed in Merge Docs."
    )
    category_beta_status: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="Category or categories this integration is in beta status for."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
