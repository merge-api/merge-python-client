# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PayPeriodEnum(str, enum.Enum):
    """
    * `HOUR` - HOUR
    * `DAY` - DAY
    * `WEEK` - WEEK
    * `EVERY_TWO_WEEKS` - EVERY_TWO_WEEKS
    * `SEMIMONTHLY` - SEMIMONTHLY
    * `MONTH` - MONTH
    * `QUARTER` - QUARTER
    * `EVERY_SIX_MONTHS` - EVERY_SIX_MONTHS
    * `YEAR` - YEAR
    """

    HOUR = "HOUR"
    DAY = "DAY"
    WEEK = "WEEK"
    EVERY_TWO_WEEKS = "EVERY_TWO_WEEKS"
    SEMIMONTHLY = "SEMIMONTHLY"
    MONTH = "MONTH"
    QUARTER = "QUARTER"
    EVERY_SIX_MONTHS = "EVERY_SIX_MONTHS"
    YEAR = "YEAR"

    def visit(
        self,
        hour: typing.Callable[[], T_Result],
        day: typing.Callable[[], T_Result],
        week: typing.Callable[[], T_Result],
        every_two_weeks: typing.Callable[[], T_Result],
        semimonthly: typing.Callable[[], T_Result],
        month: typing.Callable[[], T_Result],
        quarter: typing.Callable[[], T_Result],
        every_six_months: typing.Callable[[], T_Result],
        year: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PayPeriodEnum.HOUR:
            return hour()
        if self is PayPeriodEnum.DAY:
            return day()
        if self is PayPeriodEnum.WEEK:
            return week()
        if self is PayPeriodEnum.EVERY_TWO_WEEKS:
            return every_two_weeks()
        if self is PayPeriodEnum.SEMIMONTHLY:
            return semimonthly()
        if self is PayPeriodEnum.MONTH:
            return month()
        if self is PayPeriodEnum.QUARTER:
            return quarter()
        if self is PayPeriodEnum.EVERY_SIX_MONTHS:
            return every_six_months()
        if self is PayPeriodEnum.YEAR:
            return year()
