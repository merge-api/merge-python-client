# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .remote_field_api import RemoteFieldApi

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class RemoteFieldApiResponse(pydantic.BaseModel):
    benefit: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Benefit")
    employer_benefit: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="EmployerBenefit")
    company: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Company")
    employee_payroll_run: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="EmployeePayrollRun")
    employee: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Employee")
    employment: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Employment")
    location: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Location")
    payroll_run: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="PayrollRun")
    team: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Team")
    time_off: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="TimeOff")
    time_off_balance: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="TimeOffBalance")
    bank_info: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="BankInfo")
    pay_group: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="PayGroup")
    group: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Group")
    dependent: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Dependent")
    timesheet_entry: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="TimesheetEntry")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
