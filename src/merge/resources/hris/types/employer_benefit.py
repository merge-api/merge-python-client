# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .employer_benefit_benefit_plan_type import EmployerBenefitBenefitPlanType

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EmployerBenefit(pydantic.BaseModel):
    """
    # The EmployerBenefit Object

    ### Description

    The `Employer Benefit` object is used to represent a benefit plan offered by a company.

    ### Usage Example

    Fetch from the `LIST EmployerBenefits` endpoint and filter by `ID` to show all EmployerBenefits.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was created by Merge."
    )
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was modified by Merge."
    )
    benefit_plan_type: typing.Optional[EmployerBenefitBenefitPlanType] = pydantic.Field(
        description=(
            "The type of benefit plan.\n"
            "\n"
            "- `MEDICAL` - MEDICAL\n"
            "- `HEALTH_SAVINGS` - HEALTH_SAVINGS\n"
            "- `INSURANCE` - INSURANCE\n"
            "- `RETIREMENT` - RETIREMENT\n"
            "- `OTHER` - OTHER\n"
        )
    )
    name: typing.Optional[str] = pydantic.Field(
        description="The employer benefit's name - typically the carrier or network name."
    )
    description: typing.Optional[str] = pydantic.Field(description="The employer benefit's description.")
    deduction_code: typing.Optional[str] = pydantic.Field(description="The employer benefit's deduction code.")
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(
        description="Indicates whether or not this object has been deleted in the third party platform."
    )
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[typing.Optional[typing.Dict[str, typing.Any]]]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
