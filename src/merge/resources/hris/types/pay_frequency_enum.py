# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PayFrequencyEnum(str, enum.Enum):
    """
    * `WEEKLY` - WEEKLY
    * `BIWEEKLY` - BIWEEKLY
    * `MONTHLY` - MONTHLY
    * `QUARTERLY` - QUARTERLY
    * `SEMIANNUALLY` - SEMIANNUALLY
    * `ANNUALLY` - ANNUALLY
    * `THIRTEEN-MONTHLY` - THIRTEEN-MONTHLY
    * `PRO_RATA` - PRO_RATA
    * `SEMIMONTHLY` - SEMIMONTHLY
    """

    WEEKLY = "WEEKLY"
    BIWEEKLY = "BIWEEKLY"
    MONTHLY = "MONTHLY"
    QUARTERLY = "QUARTERLY"
    SEMIANNUALLY = "SEMIANNUALLY"
    ANNUALLY = "ANNUALLY"
    THIRTEEN_MONTHLY = "THIRTEEN-MONTHLY"
    PRO_RATA = "PRO_RATA"
    SEMIMONTHLY = "SEMIMONTHLY"

    def visit(
        self,
        weekly: typing.Callable[[], T_Result],
        biweekly: typing.Callable[[], T_Result],
        monthly: typing.Callable[[], T_Result],
        quarterly: typing.Callable[[], T_Result],
        semiannually: typing.Callable[[], T_Result],
        annually: typing.Callable[[], T_Result],
        thirteen_monthly: typing.Callable[[], T_Result],
        pro_rata: typing.Callable[[], T_Result],
        semimonthly: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PayFrequencyEnum.WEEKLY:
            return weekly()
        if self is PayFrequencyEnum.BIWEEKLY:
            return biweekly()
        if self is PayFrequencyEnum.MONTHLY:
            return monthly()
        if self is PayFrequencyEnum.QUARTERLY:
            return quarterly()
        if self is PayFrequencyEnum.SEMIANNUALLY:
            return semiannually()
        if self is PayFrequencyEnum.ANNUALLY:
            return annually()
        if self is PayFrequencyEnum.THIRTEEN_MONTHLY:
            return thirteen_monthly()
        if self is PayFrequencyEnum.PRO_RATA:
            return pro_rata()
        if self is PayFrequencyEnum.SEMIMONTHLY:
            return semimonthly()
