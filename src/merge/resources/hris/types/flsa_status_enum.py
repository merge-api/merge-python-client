# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class FlsaStatusEnum(str, enum.Enum):
    """
    * `EXEMPT` - EXEMPT
    * `SALARIED_NONEXEMPT` - SALARIED_NONEXEMPT
    * `NONEXEMPT` - NONEXEMPT
    * `OWNER` - OWNER
    """

    EXEMPT = "EXEMPT"
    SALARIED_NONEXEMPT = "SALARIED_NONEXEMPT"
    NONEXEMPT = "NONEXEMPT"
    OWNER = "OWNER"

    def visit(
        self,
        exempt: typing.Callable[[], T_Result],
        salaried_nonexempt: typing.Callable[[], T_Result],
        nonexempt: typing.Callable[[], T_Result],
        owner: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is FlsaStatusEnum.EXEMPT:
            return exempt()
        if self is FlsaStatusEnum.SALARIED_NONEXEMPT:
            return salaried_nonexempt()
        if self is FlsaStatusEnum.NONEXEMPT:
            return nonexempt()
        if self is FlsaStatusEnum.OWNER:
            return owner()
