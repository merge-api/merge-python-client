# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .employee import Employee
from .employment import Employment
from .team import Team
import typing
import pydantic
import datetime as dt
from .benefit_employee import BenefitEmployee
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class Benefit(UniversalBaseModel):
    """
    # The Benefit Object

    ### Description

    The `Benefit` object is used to represent a benefit that an employee has enrolled in.

    ### Usage Example

    Fetch from the `LIST Benefits` endpoint and filter by `ID` to show all benefits.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    employee: typing.Optional[BenefitEmployee] = pydantic.Field()
    """
    The employee on the plan.
    """

    provider_name: typing.Optional[str] = pydantic.Field()
    """
    The name of the benefit provider.
    """

    benefit_plan_type: typing.Optional[str] = pydantic.Field()
    """
    The type of benefit plan
    """

    employee_contribution: typing.Optional[float] = pydantic.Field()
    """
    The employee's contribution.
    """

    company_contribution: typing.Optional[float] = pydantic.Field()
    """
    The company's contribution.
    """

    start_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The day and time the benefit started.
    """

    end_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The day and time the benefit ended.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    employer_benefit: typing.Optional[str] = pydantic.Field()
    """
    The employer benefit plan the employee is enrolled in.
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Employee, Benefit=Benefit)
update_forward_refs(Employment, Benefit=Benefit)
update_forward_refs(Team, Benefit=Benefit)
