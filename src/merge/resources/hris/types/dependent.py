# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .dependent_gender import DependentGender
from .dependent_relationship import DependentRelationship
from .remote_data import RemoteData


class Dependent(pydantic_v1.BaseModel):
    """
    # The Dependent Object

    ### Description

    The `Dependent` object is used to represent a dependent (e.g. child, spouse, domestic partner, etc) of an `Employee`

    ### Usage Example

    Fetch from the `LIST Dependents` endpoint and filter by `ID` to show all dependents.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    first_name: typing.Optional[str] = pydantic_v1.Field()
    """
    The dependents's first name.
    """

    middle_name: typing.Optional[str] = pydantic_v1.Field()
    """
    The dependents's middle name.
    """

    last_name: typing.Optional[str] = pydantic_v1.Field()
    """
    The dependents's last name.
    """

    relationship: typing.Optional[DependentRelationship] = pydantic_v1.Field()
    """
    The dependent's relationship to the employee.
    
    - `CHILD` - CHILD
    - `SPOUSE` - SPOUSE
    - `DOMESTIC_PARTNER` - DOMESTIC_PARTNER
    """

    employee: typing.Optional[str] = pydantic_v1.Field()
    """
    The employee this person is a dependent of.
    """

    date_of_birth: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The dependent's date of birth.
    """

    gender: typing.Optional[DependentGender] = pydantic_v1.Field()
    """
    The dependent's gender.
    
    - `MALE` - MALE
    - `FEMALE` - FEMALE
    - `NON-BINARY` - NON-BINARY
    - `OTHER` - OTHER
    - `PREFER_NOT_TO_DISCLOSE` - PREFER_NOT_TO_DISCLOSE
    """

    phone_number: typing.Optional[str] = pydantic_v1.Field()
    """
    The dependent's phone number.
    """

    home_location: typing.Optional[str] = pydantic_v1.Field()
    """
    The dependents's home address.
    """

    is_student: typing.Optional[bool] = pydantic_v1.Field()
    """
    Whether or not the dependent is a student
    """

    ssn: typing.Optional[str] = pydantic_v1.Field()
    """
    The dependents's social security number.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic_v1.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform.
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
