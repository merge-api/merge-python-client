# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .dependent_relationship import DependentRelationship
from .dependent_gender import DependentGender
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class Dependent(UniversalBaseModel):
    """
    # The Dependent Object

    ### Description

    The `Dependent` object is used to represent a dependent (e.g. child, spouse, domestic partner, etc) of an `Employee`

    ### Usage Example

    Fetch from the `LIST Dependents` endpoint and filter by `ID` to show all dependents.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    first_name: typing.Optional[str] = pydantic.Field()
    """
    The dependents's first name.
    """

    middle_name: typing.Optional[str] = pydantic.Field()
    """
    The dependents's middle name.
    """

    last_name: typing.Optional[str] = pydantic.Field()
    """
    The dependents's last name.
    """

    relationship: typing.Optional[DependentRelationship] = pydantic.Field()
    """
    The dependent's relationship to the employee.
    
    - `CHILD` - CHILD
    - `SPOUSE` - SPOUSE
    - `DOMESTIC_PARTNER` - DOMESTIC_PARTNER
    """

    employee: typing.Optional[str] = pydantic.Field()
    """
    The employee this person is a dependent of.
    """

    date_of_birth: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The dependent's date of birth.
    """

    gender: typing.Optional[DependentGender] = pydantic.Field()
    """
    The dependent's gender.
    
    - `MALE` - MALE
    - `FEMALE` - FEMALE
    - `NON-BINARY` - NON-BINARY
    - `OTHER` - OTHER
    - `PREFER_NOT_TO_DISCLOSE` - PREFER_NOT_TO_DISCLOSE
    """

    phone_number: typing.Optional[str] = pydantic.Field()
    """
    The dependent's phone number.
    """

    home_location: typing.Optional[str] = pydantic.Field()
    """
    The dependents's home address.
    """

    is_student: typing.Optional[bool] = pydantic.Field()
    """
    Whether or not the dependent is a student
    """

    ssn: typing.Optional[str] = pydantic.Field()
    """
    The dependents's social security number.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
