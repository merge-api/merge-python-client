# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class RunTypeEnum(str, enum.Enum):
    """
    * `REGULAR` - REGULAR
    * `OFF_CYCLE` - OFF_CYCLE
    * `CORRECTION` - CORRECTION
    * `TERMINATION` - TERMINATION
    * `SIGN_ON_BONUS` - SIGN_ON_BONUS
    """

    REGULAR = "REGULAR"
    OFF_CYCLE = "OFF_CYCLE"
    CORRECTION = "CORRECTION"
    TERMINATION = "TERMINATION"
    SIGN_ON_BONUS = "SIGN_ON_BONUS"

    def visit(
        self,
        regular: typing.Callable[[], T_Result],
        off_cycle: typing.Callable[[], T_Result],
        correction: typing.Callable[[], T_Result],
        termination: typing.Callable[[], T_Result],
        sign_on_bonus: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is RunTypeEnum.REGULAR:
            return regular()
        if self is RunTypeEnum.OFF_CYCLE:
            return off_cycle()
        if self is RunTypeEnum.CORRECTION:
            return correction()
        if self is RunTypeEnum.TERMINATION:
            return termination()
        if self is RunTypeEnum.SIGN_ON_BONUS:
            return sign_on_bonus()
