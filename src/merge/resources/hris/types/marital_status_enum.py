# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class MaritalStatusEnum(str, enum.Enum):
    """
    * `SINGLE` - SINGLE
    * `MARRIED_FILING_JOINTLY` - MARRIED_FILING_JOINTLY
    * `MARRIED_FILING_SEPARATELY` - MARRIED_FILING_SEPARATELY
    * `HEAD_OF_HOUSEHOLD` - HEAD_OF_HOUSEHOLD
    * `QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD` - QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD
    """

    SINGLE = "SINGLE"
    MARRIED_FILING_JOINTLY = "MARRIED_FILING_JOINTLY"
    MARRIED_FILING_SEPARATELY = "MARRIED_FILING_SEPARATELY"
    HEAD_OF_HOUSEHOLD = "HEAD_OF_HOUSEHOLD"
    QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD = "QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD"

    def visit(
        self,
        single: typing.Callable[[], T_Result],
        married_filing_jointly: typing.Callable[[], T_Result],
        married_filing_separately: typing.Callable[[], T_Result],
        head_of_household: typing.Callable[[], T_Result],
        qualifying_widow_or_widower_with_dependent_child: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is MaritalStatusEnum.SINGLE:
            return single()
        if self is MaritalStatusEnum.MARRIED_FILING_JOINTLY:
            return married_filing_jointly()
        if self is MaritalStatusEnum.MARRIED_FILING_SEPARATELY:
            return married_filing_separately()
        if self is MaritalStatusEnum.HEAD_OF_HOUSEHOLD:
            return head_of_household()
        if self is MaritalStatusEnum.QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD:
            return qualifying_widow_or_widower_with_dependent_child()
