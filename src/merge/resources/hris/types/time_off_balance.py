# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .employee import Employee
from .employment import Employment
from .team import Team
import typing
import pydantic
import datetime as dt
from .time_off_balance_employee import TimeOffBalanceEmployee
from .time_off_balance_policy_type import TimeOffBalancePolicyType
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class TimeOffBalance(UniversalBaseModel):
    """
    # The TimeOffBalance Object

    ### Description

    The `TimeOffBalance` object is used to represent current balances for an employee's Time Off plan.

    ### Usage Example

    Fetch from the `LIST TimeOffBalances` endpoint and filter by `ID` to show all time off balances.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    employee: typing.Optional[TimeOffBalanceEmployee] = pydantic.Field()
    """
    The employee the balance belongs to.
    """

    balance: typing.Optional[float] = pydantic.Field()
    """
    The current remaining PTO balance, measured in hours. For integrations that return this value in days, Merge multiplies by 8 to calculate hours.
    """

    used: typing.Optional[float] = pydantic.Field()
    """
    The amount of PTO used in terms of hours. For integrations that return this value in days, Merge multiplies by 8 to calculate hours.
    """

    policy_type: typing.Optional[TimeOffBalancePolicyType] = pydantic.Field()
    """
    The policy type of this time off balance.
    
    - `VACATION` - VACATION
    - `SICK` - SICK
    - `PERSONAL` - PERSONAL
    - `JURY_DUTY` - JURY_DUTY
    - `VOLUNTEER` - VOLUNTEER
    - `BEREAVEMENT` - BEREAVEMENT
    """

    remote_was_deleted: typing.Optional[bool] = pydantic.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Employee, TimeOffBalance=TimeOffBalance)
update_forward_refs(Employment, TimeOffBalance=TimeOffBalance)
update_forward_refs(Team, TimeOffBalance=TimeOffBalance)
