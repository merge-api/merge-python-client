# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EmploymentTypeEnum(str, enum.Enum):
    """
    * `FULL_TIME` - FULL_TIME
    * `PART_TIME` - PART_TIME
    * `INTERN` - INTERN
    * `CONTRACTOR` - CONTRACTOR
    * `FREELANCE` - FREELANCE
    """

    FULL_TIME = "FULL_TIME"
    PART_TIME = "PART_TIME"
    INTERN = "INTERN"
    CONTRACTOR = "CONTRACTOR"
    FREELANCE = "FREELANCE"

    def visit(
        self,
        full_time: typing.Callable[[], T_Result],
        part_time: typing.Callable[[], T_Result],
        intern: typing.Callable[[], T_Result],
        contractor: typing.Callable[[], T_Result],
        freelance: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EmploymentTypeEnum.FULL_TIME:
            return full_time()
        if self is EmploymentTypeEnum.PART_TIME:
            return part_time()
        if self is EmploymentTypeEnum.INTERN:
            return intern()
        if self is EmploymentTypeEnum.CONTRACTOR:
            return contractor()
        if self is EmploymentTypeEnum.FREELANCE:
            return freelance()
