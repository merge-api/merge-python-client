# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
from .field_mapping_api_instance import FieldMappingApiInstance
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class FieldMappingApiInstanceResponse(UniversalBaseModel):
    benefit: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Benefit")
    employer_benefit: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="EmployerBenefit")
    company: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Company")
    employee_payroll_run: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(
        alias="EmployeePayrollRun"
    )
    employee: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Employee")
    employment: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Employment")
    location: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Location")
    payroll_run: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="PayrollRun")
    team: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Team")
    time_off: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="TimeOff")
    time_off_balance: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="TimeOffBalance")
    bank_info: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="BankInfo")
    pay_group: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="PayGroup")
    group: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Group")
    dependent: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="Dependent")
    timesheet_entry: typing.Optional[typing.List[FieldMappingApiInstance]] = pydantic.Field(alias="TimesheetEntry")

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
