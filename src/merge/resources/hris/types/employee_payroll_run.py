# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .employee import Employee
from .employment import Employment
from .team import Team
import typing
import pydantic
import datetime as dt
from .employee_payroll_run_employee import EmployeePayrollRunEmployee
from .employee_payroll_run_payroll_run import EmployeePayrollRunPayrollRun
from .earning import Earning
from .deduction import Deduction
from .tax import Tax
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class EmployeePayrollRun(UniversalBaseModel):
    """
    # The EmployeePayrollRun Object

    ### Description

    The `EmployeePayrollRun` object is used to represent an employee's pay statement for a specific payroll run.

    ### Usage Example

    Fetch from the `LIST EmployeePayrollRun` endpoint and filter by `ID` to show all employee payroll runs.
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    employee: typing.Optional[EmployeePayrollRunEmployee] = pydantic.Field()
    """
    The employee whose payroll is being run.
    """

    payroll_run: typing.Optional[EmployeePayrollRunPayrollRun] = pydantic.Field()
    """
    The payroll being run.
    """

    gross_pay: typing.Optional[float] = pydantic.Field()
    """
    The total earnings throughout a given period for an employee before any deductions are made.
    """

    net_pay: typing.Optional[float] = pydantic.Field()
    """
    The take-home pay throughout a given period for an employee after deductions are made.
    """

    start_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The day and time the payroll run started.
    """

    end_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The day and time the payroll run ended.
    """

    check_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The day and time the payroll run was checked.
    """

    earnings: typing.Optional[typing.List[Earning]]
    deductions: typing.Optional[typing.List[Deduction]]
    taxes: typing.Optional[typing.List[Tax]]
    remote_was_deleted: typing.Optional[bool] = pydantic.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform. Full coverage deletion detection is a premium add-on. Native deletion detection is offered for free with limited coverage. [Learn more](https://docs.merge.dev/integrations/hris/supported-features/).
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Employee, EmployeePayrollRun=EmployeePayrollRun)
update_forward_refs(Employment, EmployeePayrollRun=EmployeePayrollRun)
update_forward_refs(Team, EmployeePayrollRun=EmployeePayrollRun)
