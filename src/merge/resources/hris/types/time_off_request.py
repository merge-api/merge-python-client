# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .time_off_request_approver import TimeOffRequestApprover
from .time_off_request_employee import TimeOffRequestEmployee
from .time_off_request_request_type import TimeOffRequestRequestType
from .time_off_request_status import TimeOffRequestStatus
from .time_off_request_units import TimeOffRequestUnits


class TimeOffRequest(pydantic.BaseModel):
    """
    # The TimeOff Object
    ### Description
    The `TimeOff` object is used to represent all employees' Time Off entries.

    ### Usage Example
    Fetch from the `LIST TimeOffs` endpoint and filter by `ID` to show all time off requests.
    """

    employee: typing.Optional[TimeOffRequestEmployee] = pydantic.Field(description="The employee requesting time off.")
    approver: typing.Optional[TimeOffRequestApprover] = pydantic.Field(
        description="The Merge ID of the employee with the ability to approve the time off request."
    )
    status: typing.Optional[TimeOffRequestStatus] = pydantic.Field(
        description=(
            "The status of this time off request.\n"
            "\n"
            "* `REQUESTED` - REQUESTED\n"
            "* `APPROVED` - APPROVED\n"
            "* `DECLINED` - DECLINED\n"
            "* `CANCELLED` - CANCELLED\n"
            "* `DELETED` - DELETED\n"
        )
    )
    employee_note: typing.Optional[str] = pydantic.Field(description="The employee note for this time off request.")
    units: typing.Optional[TimeOffRequestUnits] = pydantic.Field(
        description=(
            "The measurement that the third-party integration uses to count time requested.\n"
            "\n"
            "* `HOURS` - HOURS\n"
            "* `DAYS` - DAYS\n"
        )
    )
    amount: typing.Optional[float] = pydantic.Field(
        description="The time off quantity measured by the prescribed “units”."
    )
    request_type: typing.Optional[TimeOffRequestRequestType] = pydantic.Field(
        description=(
            "The type of time off request.\n"
            "\n"
            "* `VACATION` - VACATION\n"
            "* `SICK` - SICK\n"
            "* `PERSONAL` - PERSONAL\n"
            "* `JURY_DUTY` - JURY_DUTY\n"
            "* `VOLUNTEER` - VOLUNTEER\n"
            "* `BEREAVEMENT` - BEREAVEMENT\n"
        )
    )
    start_time: typing.Optional[dt.datetime] = pydantic.Field(
        description="The day and time of the start of the time requested off."
    )
    end_time: typing.Optional[dt.datetime] = pydantic.Field(
        description="The day and time of the end of the time requested off."
    )
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
