# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .remote_data import RemoteData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Attachment(pydantic.BaseModel):
    """
    # The Attachment Object

    ### Description

    The `Attachment` object is used to represent an attachment for a ticket.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was created by Merge."
    )
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was modified by Merge."
    )
    file_name: typing.Optional[str] = pydantic.Field(
        description="The attachment's name. It is required to include the file extension in the attachment's name."
    )
    ticket: typing.Optional[AttachmentTicket] = pydantic.Field(description="The ticket associated with the attachment.")
    file_url: typing.Optional[str] = pydantic.Field(
        description="The attachment's url. It is required to include the file extension in the file's URL."
    )
    content_type: typing.Optional[str] = pydantic.Field(description="The attachment's file format.")
    uploaded_by: typing.Optional[str] = pydantic.Field(description="The user who uploaded the attachment.")
    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's attachment was created."
    )
    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}


from .attachment_ticket import AttachmentTicket  # noqa: E402

Attachment.update_forward_refs()
