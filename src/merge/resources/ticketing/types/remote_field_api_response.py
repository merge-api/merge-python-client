# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
from .remote_field_api import RemoteFieldApi
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class RemoteFieldApiResponse(UniversalBaseModel):
    ticket: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Ticket")
    comment: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Comment")
    project: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Project")
    collection: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Collection")
    user: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="User")
    role: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Role")
    account: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Account")
    team: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Team")
    attachment: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Attachment")
    tag: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Tag")
    contact: typing.Optional[typing.List[RemoteFieldApi]] = pydantic.Field(alias="Contact")

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
