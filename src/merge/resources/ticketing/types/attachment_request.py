# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .attachment_request_ticket import AttachmentRequestTicket


class AttachmentRequest(UniversalBaseModel):
    """
    # The Attachment Object

    ### Description

    The `Attachment` object is used to represent an attachment for a ticket.

    ### Usage Example

    TODO
    """

    file_name: typing.Optional[str] = pydantic.Field()
    """
    The attachment's name. It is required to include the file extension in the attachment's name.
    """

    ticket: typing.Optional[AttachmentRequestTicket] = pydantic.Field()
    """
    The ticket associated with the attachment.
    """

    file_url: typing.Optional[str] = pydantic.Field()
    """
    The attachment's url. It is required to include the file extension in the file's URL.
    """

    content_type: typing.Optional[str] = pydantic.Field()
    """
    The attachment's file format.
    """

    uploaded_by: typing.Optional[str] = pydantic.Field()
    """
    The user who uploaded the attachment.
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
