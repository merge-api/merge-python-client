# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .comment_contact import CommentContact
from .comment_ticket import CommentTicket
from .comment_user import CommentUser
from .remote_data import RemoteData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Comment(pydantic.BaseModel):
    """
    # The Comment Object

    ### Description

    The `Comment` object is used to represent a comment on a ticket.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was created by Merge."
    )
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was modified by Merge."
    )
    user: typing.Optional[CommentUser] = pydantic.Field(
        description="The author of the Comment, if the author is a User."
    )
    contact: typing.Optional[CommentContact] = pydantic.Field(
        description="The author of the Comment, if the author is a Contact."
    )
    body: typing.Optional[str] = pydantic.Field(description="The comment's text body.")
    html_body: typing.Optional[str] = pydantic.Field(description="The comment's text body formatted as html.")
    ticket: typing.Optional[CommentTicket] = pydantic.Field(description="The ticket associated with the comment.")
    is_private: typing.Optional[bool] = pydantic.Field(description="Whether or not the comment is internal.")
    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="When the third party's comment was created."
    )
    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
