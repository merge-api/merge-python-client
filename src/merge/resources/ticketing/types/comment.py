# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .attachment import Attachment
from .collection import Collection
from .ticket import Ticket
import typing
import pydantic
import datetime as dt
from .comment_user import CommentUser
from .comment_contact import CommentContact
from .comment_ticket import CommentTicket
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class Comment(UniversalBaseModel):
    """
    # The Comment Object

    ### Description

    The `Comment` object is used to represent a comment on a ticket.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    user: typing.Optional[CommentUser] = pydantic.Field()
    """
    The author of the Comment, if the author is a User.
    """

    contact: typing.Optional[CommentContact] = pydantic.Field()
    """
    The author of the Comment, if the author is a Contact.
    """

    body: typing.Optional[str] = pydantic.Field()
    """
    The comment's text body.
    """

    html_body: typing.Optional[str] = pydantic.Field()
    """
    The comment's text body formatted as html.
    """

    ticket: typing.Optional[CommentTicket] = pydantic.Field()
    """
    The ticket associated with the comment.
    """

    is_private: typing.Optional[bool] = pydantic.Field()
    """
    Whether or not the comment is internal.
    """

    remote_created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the third party's comment was created.
    """

    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Attachment, Comment=Comment)
update_forward_refs(Collection, Comment=Comment)
update_forward_refs(Ticket, Comment=Comment)
