# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .comment_contact import CommentContact
from .comment_ticket import CommentTicket
from .comment_user import CommentUser
from .remote_data import RemoteData


class Comment(pydantic_v1.BaseModel):
    """
    # The Comment Object

    ### Description

    The `Comment` object is used to represent a comment on a ticket.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    user: typing.Optional[CommentUser] = pydantic_v1.Field()
    """
    The author of the Comment, if the author is a User.
    """

    contact: typing.Optional[CommentContact] = pydantic_v1.Field()
    """
    The author of the Comment, if the author is a Contact.
    """

    body: typing.Optional[str] = pydantic_v1.Field()
    """
    The comment's text body.
    """

    html_body: typing.Optional[str] = pydantic_v1.Field()
    """
    The comment's text body formatted as html.
    """

    ticket: typing.Optional[CommentTicket] = pydantic_v1.Field()
    """
    The ticket associated with the comment.
    """

    is_private: typing.Optional[bool] = pydantic_v1.Field()
    """
    Whether or not the comment is internal.
    """

    remote_created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    When the third party's comment was created.
    """

    remote_was_deleted: typing.Optional[bool]
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
