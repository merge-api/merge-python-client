# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .collection_access_level import CollectionAccessLevel
from .collection_collection_type import CollectionCollectionType
from .remote_data import RemoteData


class Collection(pydantic_v1.BaseModel):
    """
    # The Collection Object

    ### Description

    The `Collection` object is used to represent collections of tickets. Collections may include other collections as
    sub collections.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic_v1.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic_v1.Field()
    """
    The datetime that this object was modified by Merge.
    """

    name: typing.Optional[str] = pydantic_v1.Field()
    """
    The collection's name.
    """

    description: typing.Optional[str] = pydantic_v1.Field()
    """
    The collection's description.
    """

    collection_type: typing.Optional[CollectionCollectionType] = pydantic_v1.Field()
    """
    The collection's type.
    
    - `LIST` - LIST
    - `PROJECT` - PROJECT
    """

    parent_collection: typing.Optional[CollectionParentCollection] = pydantic_v1.Field()
    """
    The parent collection for this collection.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic_v1.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform.
    """

    access_level: typing.Optional[CollectionAccessLevel] = pydantic_v1.Field()
    """
    The level of access a User has to the Collection and its sub-objects.
    
    - `PRIVATE` - PRIVATE
    - `COMPANY` - COMPANY
    - `PUBLIC` - PUBLIC
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


from .collection_parent_collection import CollectionParentCollection  # noqa: E402

Collection.update_forward_refs()
