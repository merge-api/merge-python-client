# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from .collection_collection_type import CollectionCollectionType
from .collection_access_level import CollectionAccessLevel
from .remote_data import RemoteData
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class Collection(UniversalBaseModel):
    """
    # The Collection Object

    ### Description

    The `Collection` object is used to represent collections of tickets. Collections may include other collections as
    sub collections.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field()
    """
    The third-party API ID of the matching object.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was created by Merge.
    """

    modified_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The datetime that this object was modified by Merge.
    """

    name: typing.Optional[str] = pydantic.Field()
    """
    The collection's name.
    """

    description: typing.Optional[str] = pydantic.Field()
    """
    The collection's description.
    """

    collection_type: typing.Optional[CollectionCollectionType] = pydantic.Field()
    """
    The collection's type.
    
    - `LIST` - LIST
    - `PROJECT` - PROJECT
    """

    parent_collection: typing.Optional["CollectionParentCollection"] = pydantic.Field()
    """
    The parent collection for this collection.
    """

    remote_was_deleted: typing.Optional[bool] = pydantic.Field()
    """
    Indicates whether or not this object has been deleted in the third party platform.
    """

    access_level: typing.Optional[CollectionAccessLevel] = pydantic.Field()
    """
    The level of access a User has to the Collection and its sub-objects.
    
    - `PRIVATE` - PRIVATE
    - `COMPANY` - COMPANY
    - `PUBLIC` - PUBLIC
    """

    field_mappings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .collection_parent_collection import CollectionParentCollection  # noqa: E402

update_forward_refs(Collection)
