# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .collection_access_level import CollectionAccessLevel
from .collection_collection_type import CollectionCollectionType
from .remote_data import RemoteData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Collection(pydantic.BaseModel):
    """
    # The Collection Object

    ### Description

    The `Collection` object is used to represent collections of tickets. Collections may include other collections as
    sub collections.

    ### Usage Example

    TODO
    """

    id: typing.Optional[str]
    remote_id: typing.Optional[str] = pydantic.Field(description="The third-party API ID of the matching object.")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was created by Merge."
    )
    modified_at: typing.Optional[dt.datetime] = pydantic.Field(
        description="The datetime that this object was modified by Merge."
    )
    name: typing.Optional[str] = pydantic.Field(description="The collection's name.")
    description: typing.Optional[str] = pydantic.Field(description="The collection's description.")
    collection_type: typing.Optional[CollectionCollectionType] = pydantic.Field(
        description=("The collection's type.\n" "\n" "- `LIST` - LIST\n" "- `PROJECT` - PROJECT\n")
    )
    parent_collection: typing.Optional[CollectionParentCollection] = pydantic.Field(
        description="The parent collection for this collection."
    )
    remote_was_deleted: typing.Optional[bool] = pydantic.Field(
        description="Indicates whether or not this object has been deleted in the third party platform."
    )
    access_level: typing.Optional[CollectionAccessLevel] = pydantic.Field(
        description=(
            "The level of access a User has to the Collection and its sub-objects.\n"
            "\n"
            "- `PRIVATE` - PRIVATE\n"
            "- `COMPANY` - COMPANY\n"
            "- `PUBLIC` - PUBLIC\n"
        )
    )
    field_mappings: typing.Optional[typing.Dict[str, typing.Any]]
    remote_data: typing.Optional[typing.List[RemoteData]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}


from .collection_parent_collection import CollectionParentCollection  # noqa: E402

Collection.update_forward_refs()
