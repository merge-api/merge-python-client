# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime


class LinkedAccountCondition(pydantic.BaseModel):
    condition_schema_id: str = pydantic.Field(
        description="The ID indicating which condition schema to use for a specific condition."
    )
    common_model: typing.Optional[str] = pydantic.Field(description="The common model for a specific condition.")
    native_name: typing.Optional[str] = pydantic.Field(
        description='User-facing *native condition* name. e.g. "Skip Manager".'
    )
    operator: str = pydantic.Field(description="The operator for a specific condition.")
    value: typing.Optional[typing.Any]
    field_name: typing.Optional[str] = pydantic.Field(
        description='The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type".'
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
