# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .collection import Collection
from .attachment import Attachment
from .ticket import Ticket
import typing
import pydantic
from .ticket_request_assignees_item import TicketRequestAssigneesItem
from .ticket_request_creator import TicketRequestCreator
import datetime as dt
from .ticket_request_status import TicketRequestStatus
from .ticket_request_collections_item import TicketRequestCollectionsItem
from .ticket_request_account import TicketRequestAccount
from .ticket_request_contact import TicketRequestContact
from .ticket_request_parent_ticket import TicketRequestParentTicket
from .ticket_request_attachments_item import TicketRequestAttachmentsItem
from .ticket_request_priority import TicketRequestPriority
from .remote_field_request import RemoteFieldRequest
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class TicketRequest(UniversalBaseModel):
    """
    # The Ticket Object

    ### Description

    The `Ticket` object is used to represent a ticket or a task within a system.

    ### Usage Example

    TODO
    """

    name: typing.Optional[str] = pydantic.Field()
    """
    The ticket's name.
    """

    assignees: typing.Optional[typing.List[typing.Optional[TicketRequestAssigneesItem]]]
    creator: typing.Optional[TicketRequestCreator] = pydantic.Field()
    """
    The user who created this ticket.
    """

    due_date: typing.Optional[dt.datetime] = pydantic.Field()
    """
    The ticket's due date.
    """

    status: typing.Optional[TicketRequestStatus] = pydantic.Field()
    """
    The current status of the ticket.
    
    - `OPEN` - OPEN
    - `CLOSED` - CLOSED
    - `IN_PROGRESS` - IN_PROGRESS
    - `ON_HOLD` - ON_HOLD
    """

    description: typing.Optional[str] = pydantic.Field()
    """
    The ticketâ€™s description. HTML version of description is mapped if supported by the third-party platform.
    """

    collections: typing.Optional[typing.List[typing.Optional[TicketRequestCollectionsItem]]]
    ticket_type: typing.Optional[str] = pydantic.Field()
    """
    The sub category of the ticket within the 3rd party system. Examples include incident, task, subtask or to-do.
    """

    account: typing.Optional[TicketRequestAccount] = pydantic.Field()
    """
    The account associated with the ticket.
    """

    contact: typing.Optional[TicketRequestContact] = pydantic.Field()
    """
    The contact associated with the ticket.
    """

    parent_ticket: typing.Optional[TicketRequestParentTicket] = pydantic.Field()
    """
    The ticket's parent ticket.
    """

    attachments: typing.Optional[typing.List[typing.Optional[TicketRequestAttachmentsItem]]]
    tags: typing.Optional[typing.List[typing.Optional[str]]]
    completed_at: typing.Optional[dt.datetime] = pydantic.Field()
    """
    When the ticket was completed.
    """

    ticket_url: typing.Optional[str] = pydantic.Field()
    """
    The 3rd party url of the Ticket.
    """

    priority: typing.Optional[TicketRequestPriority] = pydantic.Field()
    """
    The priority or urgency of the Ticket.
    
    - `URGENT` - URGENT
    - `HIGH` - HIGH
    - `NORMAL` - NORMAL
    - `LOW` - LOW
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    remote_fields: typing.Optional[typing.List[RemoteFieldRequest]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Collection, TicketRequest=TicketRequest)
update_forward_refs(Attachment, TicketRequest=TicketRequest)
update_forward_refs(Ticket, TicketRequest=TicketRequest)
