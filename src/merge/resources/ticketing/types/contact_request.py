# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .contact_request_account import ContactRequestAccount

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ContactRequest(pydantic.BaseModel):
    """
    # The Contact Object

    ### Description

    The `Contact` object is used to represent the customer, lead, or external user that a ticket is associated with.

    ### Usage Example

    TODO
    """

    name: typing.Optional[str] = pydantic.Field(description="The contact's name.")
    email_address: typing.Optional[str] = pydantic.Field(description="The contact's email address.")
    phone_number: typing.Optional[str] = pydantic.Field(description="The contact's phone number.")
    details: typing.Optional[str] = pydantic.Field(description="The contact's details.")
    account: typing.Optional[ContactRequestAccount] = pydantic.Field(description="The contact's account.")
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
