# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from ....core.datetime_utils import serialize_datetime
from .comment_request_contact import CommentRequestContact
from .comment_request_ticket import CommentRequestTicket
from .comment_request_user import CommentRequestUser


class CommentRequest(pydantic.BaseModel):
    """
    # The Comment Object
    ### Description
    The `Comment` object is used to represent a comment on a ticket.

    ### Usage Example
    TODO
    """

    user: typing.Optional[CommentRequestUser] = pydantic.Field(
        description="The author of the Comment, if the author is a User."
    )
    contact: typing.Optional[CommentRequestContact] = pydantic.Field(
        description="The author of the Comment, if the author is a Contact."
    )
    body: typing.Optional[str] = pydantic.Field(description="The comment's text body.")
    html_body: typing.Optional[str] = pydantic.Field(description="The comment's text body formatted as html.")
    ticket: typing.Optional[CommentRequestTicket] = pydantic.Field(
        description="The ticket associated with the comment. "
    )
    is_private: typing.Optional[bool] = pydantic.Field(description="Whether or not the comment is internal.")
    integration_params: typing.Optional[typing.Dict[str, typing.Any]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
