# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from .attachment import Attachment
from .collection import Collection
from .ticket import Ticket
import typing
from .comment_request_user import CommentRequestUser
import pydantic
from .comment_request_contact import CommentRequestContact
from .comment_request_ticket import CommentRequestTicket
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import update_forward_refs


class CommentRequest(UniversalBaseModel):
    """
    # The Comment Object

    ### Description

    The `Comment` object is used to represent a comment on a ticket.

    ### Usage Example

    TODO
    """

    user: typing.Optional[CommentRequestUser] = pydantic.Field()
    """
    The author of the Comment, if the author is a User. If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
    """

    contact: typing.Optional[CommentRequestContact] = pydantic.Field()
    """
    The author of the Comment, if the author is a Contact.If the third party does not support specifying an author, we will append "[Posted on behalf of {name}]" to the comment.
    """

    body: typing.Optional[str] = pydantic.Field()
    """
    The comment's text body.
    """

    html_body: typing.Optional[str] = pydantic.Field()
    """
    The comment's text body formatted as html.
    """

    ticket: typing.Optional[CommentRequestTicket] = pydantic.Field()
    """
    The ticket associated with the comment.
    """

    is_private: typing.Optional[bool] = pydantic.Field()
    """
    Whether or not the comment is internal.
    """

    integration_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
    linked_account_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Attachment, CommentRequest=CommentRequest)
update_forward_refs(Collection, CommentRequest=CommentRequest)
update_forward_refs(Ticket, CommentRequest=CommentRequest)
