# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

try:
    import pydantic.v1 as pydantic
except ImportError:
    import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.datetime_utils import serialize_datetime
from .....core.jsonable_encoder import jsonable_encoder
from .....core.remove_none_from_dict import remove_none_from_dict
from .....environment import MergeEnvironment
from ...types.meta_response import MetaResponse
from ...types.paginated_remote_field_class_list import PaginatedRemoteFieldClassList
from ...types.paginated_ticket_list import PaginatedTicketList
from ...types.paginated_user_list import PaginatedUserList
from ...types.patched_ticket_request import PatchedTicketRequest
from ...types.ticket import Ticket
from ...types.ticket_request import TicketRequest
from ...types.ticket_response import TicketResponse
from ...types.tickets_collaborators_list_request_expand import TicketsCollaboratorsListRequestExpand
from ...types.tickets_list_request_expand import TicketsListRequestExpand
from ...types.tickets_list_request_priority import TicketsListRequestPriority
from ...types.tickets_list_request_remote_fields import TicketsListRequestRemoteFields
from ...types.tickets_list_request_show_enum_origins import TicketsListRequestShowEnumOrigins
from ...types.tickets_list_request_status import TicketsListRequestStatus
from ...types.tickets_retrieve_request_expand import TicketsRetrieveRequestExpand
from ...types.tickets_retrieve_request_remote_fields import TicketsRetrieveRequestRemoteFields
from ...types.tickets_retrieve_request_show_enum_origins import TicketsRetrieveRequestShowEnumOrigins

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TicketsClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: SyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        account_id: typing.Optional[str] = None,
        assignee_ids: typing.Optional[str] = None,
        collection_ids: typing.Optional[str] = None,
        completed_after: typing.Optional[dt.datetime] = None,
        completed_before: typing.Optional[dt.datetime] = None,
        contact_id: typing.Optional[str] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
        due_after: typing.Optional[dt.datetime] = None,
        due_before: typing.Optional[dt.datetime] = None,
        expand: typing.Optional[TicketsListRequestExpand] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_remote_fields: typing.Optional[bool] = None,
        modified_after: typing.Optional[dt.datetime] = None,
        modified_before: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        parent_ticket_id: typing.Optional[str] = None,
        priority: typing.Optional[TicketsListRequestPriority] = None,
        project_id: typing.Optional[str] = None,
        remote_created_after: typing.Optional[dt.datetime] = None,
        remote_created_before: typing.Optional[dt.datetime] = None,
        remote_fields: typing.Optional[TicketsListRequestRemoteFields] = None,
        remote_id: typing.Optional[str] = None,
        remote_updated_after: typing.Optional[dt.datetime] = None,
        remote_updated_before: typing.Optional[dt.datetime] = None,
        show_enum_origins: typing.Optional[TicketsListRequestShowEnumOrigins] = None,
        status: typing.Optional[TicketsListRequestStatus] = None,
        tags: typing.Optional[str] = None,
        ticket_type: typing.Optional[str] = None,
    ) -> PaginatedTicketList:
        """
        Returns a list of `Ticket` objects.

        Parameters:
            - account_id: typing.Optional[str]. If provided, will only return tickets for this account.

            - assignee_ids: typing.Optional[str]. If provided, will only return tickets assigned to the assignee_ids; multiple assignee_ids can be separated by commas.

            - collection_ids: typing.Optional[str]. If provided, will only return tickets assigned to the collection_ids; multiple collection_ids can be separated by commas.

            - completed_after: typing.Optional[dt.datetime]. If provided, will only return tickets completed after this datetime.

            - completed_before: typing.Optional[dt.datetime]. If provided, will only return tickets completed before this datetime.

            - contact_id: typing.Optional[str]. If provided, will only return tickets for this contact.

            - created_after: typing.Optional[dt.datetime]. If provided, will only return objects created after this datetime.

            - created_before: typing.Optional[dt.datetime]. If provided, will only return objects created before this datetime.

            - cursor: typing.Optional[str]. The pagination cursor value.

            - due_after: typing.Optional[dt.datetime]. If provided, will only return tickets due after this datetime.

            - due_before: typing.Optional[dt.datetime]. If provided, will only return tickets due before this datetime.

            - expand: typing.Optional[TicketsListRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - include_remote_fields: typing.Optional[bool]. Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.

            - modified_after: typing.Optional[dt.datetime]. If provided, only objects synced by Merge after this date time will be returned.

            - modified_before: typing.Optional[dt.datetime]. If provided, only objects synced by Merge before this date time will be returned.

            - page_size: typing.Optional[int]. Number of results to return per page.

            - parent_ticket_id: typing.Optional[str]. If provided, will only return sub tickets of the parent_ticket_id.

            - priority: typing.Optional[TicketsListRequestPriority]. If provided, will only return tickets of this priority.

                                                                     * `URGENT` - URGENT
                                                                     * `HIGH` - HIGH
                                                                     * `NORMAL` - NORMAL
                                                                     * `LOW` - LOW
            - project_id: typing.Optional[str]. If provided, will only return tickets for this project.

            - remote_created_after: typing.Optional[dt.datetime]. If provided, will only return tickets created in the third party platform after this datetime.

            - remote_created_before: typing.Optional[dt.datetime]. If provided, will only return tickets created in the third party platform before this datetime.

            - remote_fields: typing.Optional[TicketsListRequestRemoteFields]. Deprecated. Use show_enum_origins.

            - remote_id: typing.Optional[str]. The API provider's ID for the given object.

            - remote_updated_after: typing.Optional[dt.datetime]. If provided, will only return tickets updated in the third party platform after this datetime.

            - remote_updated_before: typing.Optional[dt.datetime]. If provided, will only return tickets updated in the third party platform before this datetime.

            - show_enum_origins: typing.Optional[TicketsListRequestShowEnumOrigins]. Which fields should be returned in non-normalized form.

            - status: typing.Optional[TicketsListRequestStatus]. If provided, will only return tickets of this status.

                                                                 * `OPEN` - OPEN
                                                                 * `CLOSED` - CLOSED
                                                                 * `IN_PROGRESS` - IN_PROGRESS
                                                                 * `ON_HOLD` - ON_HOLD
            - tags: typing.Optional[str]. If provided, will only return tickets matching the tags; multiple tags can be separated by commas.

            - ticket_type: typing.Optional[str]. If provided, will only return tickets of this type.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets"),
            params=remove_none_from_dict(
                {
                    "account_id": account_id,
                    "assignee_ids": assignee_ids,
                    "collection_ids": collection_ids,
                    "completed_after": serialize_datetime(completed_after) if completed_after is not None else None,
                    "completed_before": serialize_datetime(completed_before) if completed_before is not None else None,
                    "contact_id": contact_id,
                    "created_after": serialize_datetime(created_after) if created_after is not None else None,
                    "created_before": serialize_datetime(created_before) if created_before is not None else None,
                    "cursor": cursor,
                    "due_after": serialize_datetime(due_after) if due_after is not None else None,
                    "due_before": serialize_datetime(due_before) if due_before is not None else None,
                    "expand": expand,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "include_remote_fields": include_remote_fields,
                    "modified_after": serialize_datetime(modified_after) if modified_after is not None else None,
                    "modified_before": serialize_datetime(modified_before) if modified_before is not None else None,
                    "page_size": page_size,
                    "parent_ticket_id": parent_ticket_id,
                    "priority": priority,
                    "project_id": project_id,
                    "remote_created_after": serialize_datetime(remote_created_after)
                    if remote_created_after is not None
                    else None,
                    "remote_created_before": serialize_datetime(remote_created_before)
                    if remote_created_before is not None
                    else None,
                    "remote_fields": remote_fields,
                    "remote_id": remote_id,
                    "remote_updated_after": serialize_datetime(remote_updated_after)
                    if remote_updated_after is not None
                    else None,
                    "remote_updated_before": serialize_datetime(remote_updated_before)
                    if remote_updated_before is not None
                    else None,
                    "show_enum_origins": show_enum_origins,
                    "status": status,
                    "tags": tags,
                    "ticket_type": ticket_type,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedTicketList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        model: TicketRequest,
    ) -> TicketResponse:
        """
        Creates a `Ticket` object with the given values.

        Parameters:
            - is_debug_mode: typing.Optional[bool]. Whether to include debug fields (such as log file links) in the response.

            - run_async: typing.Optional[bool]. Whether or not third-party updates should be run asynchronously.

            - model: TicketRequest.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets"),
            params=remove_none_from_dict({"is_debug_mode": is_debug_mode, "run_async": run_async}),
            json=jsonable_encoder({"model": model}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TicketResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self,
        id: str,
        *,
        expand: typing.Optional[TicketsRetrieveRequestExpand] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_remote_fields: typing.Optional[bool] = None,
        remote_fields: typing.Optional[TicketsRetrieveRequestRemoteFields] = None,
        show_enum_origins: typing.Optional[TicketsRetrieveRequestShowEnumOrigins] = None,
    ) -> Ticket:
        """
        Returns a `Ticket` object with the given `id`.

        Parameters:
            - id: str.

            - expand: typing.Optional[TicketsRetrieveRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - include_remote_fields: typing.Optional[bool]. Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.

            - remote_fields: typing.Optional[TicketsRetrieveRequestRemoteFields]. Deprecated. Use show_enum_origins.

            - show_enum_origins: typing.Optional[TicketsRetrieveRequestShowEnumOrigins]. Which fields should be returned in non-normalized form.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/{id}"),
            params=remove_none_from_dict(
                {
                    "expand": expand,
                    "include_remote_data": include_remote_data,
                    "include_remote_fields": include_remote_fields,
                    "remote_fields": remote_fields,
                    "show_enum_origins": show_enum_origins,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Ticket, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def partial_update(
        self,
        id: str,
        *,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        model: PatchedTicketRequest,
    ) -> TicketResponse:
        """
        Updates a `Ticket` object with the given `id`.

        Parameters:
            - id: str.

            - is_debug_mode: typing.Optional[bool]. Whether to include debug fields (such as log file links) in the response.

            - run_async: typing.Optional[bool]. Whether or not third-party updates should be run asynchronously.

            - model: PatchedTicketRequest.
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/{id}"),
            params=remove_none_from_dict({"is_debug_mode": is_debug_mode, "run_async": run_async}),
            json=jsonable_encoder({"model": model}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TicketResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def collaborators_list(
        self,
        parent_id: str,
        *,
        cursor: typing.Optional[str] = None,
        expand: typing.Optional[TicketsCollaboratorsListRequestExpand] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        page_size: typing.Optional[int] = None,
    ) -> PaginatedUserList:
        """
        Returns a list of `User` objects.

        Parameters:
            - parent_id: str.

            - cursor: typing.Optional[str]. The pagination cursor value.

            - expand: typing.Optional[TicketsCollaboratorsListRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - page_size: typing.Optional[int]. Number of results to return per page.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/{parent_id}/collaborators"),
            params=remove_none_from_dict(
                {
                    "cursor": cursor,
                    "expand": expand,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "page_size": page_size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedUserList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def meta_patch_retrieve(self, id: str) -> MetaResponse:
        """
        Returns metadata for `Ticket` PATCHs.

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/meta/patch/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MetaResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def meta_post_retrieve(self) -> MetaResponse:
        """
        Returns metadata for `Ticket` POSTs.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets/meta/post"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MetaResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remote_field_classes_list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        page_size: typing.Optional[int] = None,
    ) -> PaginatedRemoteFieldClassList:
        """
        Returns a list of `RemoteFieldClass` objects.

        Parameters:
            - cursor: typing.Optional[str]. The pagination cursor value.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - page_size: typing.Optional[int]. Number of results to return per page.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets/remote-field-classes"),
            params=remove_none_from_dict(
                {
                    "cursor": cursor,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "page_size": page_size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedRemoteFieldClassList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTicketsClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: AsyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        account_id: typing.Optional[str] = None,
        assignee_ids: typing.Optional[str] = None,
        collection_ids: typing.Optional[str] = None,
        completed_after: typing.Optional[dt.datetime] = None,
        completed_before: typing.Optional[dt.datetime] = None,
        contact_id: typing.Optional[str] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
        due_after: typing.Optional[dt.datetime] = None,
        due_before: typing.Optional[dt.datetime] = None,
        expand: typing.Optional[TicketsListRequestExpand] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_remote_fields: typing.Optional[bool] = None,
        modified_after: typing.Optional[dt.datetime] = None,
        modified_before: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        parent_ticket_id: typing.Optional[str] = None,
        priority: typing.Optional[TicketsListRequestPriority] = None,
        project_id: typing.Optional[str] = None,
        remote_created_after: typing.Optional[dt.datetime] = None,
        remote_created_before: typing.Optional[dt.datetime] = None,
        remote_fields: typing.Optional[TicketsListRequestRemoteFields] = None,
        remote_id: typing.Optional[str] = None,
        remote_updated_after: typing.Optional[dt.datetime] = None,
        remote_updated_before: typing.Optional[dt.datetime] = None,
        show_enum_origins: typing.Optional[TicketsListRequestShowEnumOrigins] = None,
        status: typing.Optional[TicketsListRequestStatus] = None,
        tags: typing.Optional[str] = None,
        ticket_type: typing.Optional[str] = None,
    ) -> PaginatedTicketList:
        """
        Returns a list of `Ticket` objects.

        Parameters:
            - account_id: typing.Optional[str]. If provided, will only return tickets for this account.

            - assignee_ids: typing.Optional[str]. If provided, will only return tickets assigned to the assignee_ids; multiple assignee_ids can be separated by commas.

            - collection_ids: typing.Optional[str]. If provided, will only return tickets assigned to the collection_ids; multiple collection_ids can be separated by commas.

            - completed_after: typing.Optional[dt.datetime]. If provided, will only return tickets completed after this datetime.

            - completed_before: typing.Optional[dt.datetime]. If provided, will only return tickets completed before this datetime.

            - contact_id: typing.Optional[str]. If provided, will only return tickets for this contact.

            - created_after: typing.Optional[dt.datetime]. If provided, will only return objects created after this datetime.

            - created_before: typing.Optional[dt.datetime]. If provided, will only return objects created before this datetime.

            - cursor: typing.Optional[str]. The pagination cursor value.

            - due_after: typing.Optional[dt.datetime]. If provided, will only return tickets due after this datetime.

            - due_before: typing.Optional[dt.datetime]. If provided, will only return tickets due before this datetime.

            - expand: typing.Optional[TicketsListRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - include_remote_fields: typing.Optional[bool]. Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.

            - modified_after: typing.Optional[dt.datetime]. If provided, only objects synced by Merge after this date time will be returned.

            - modified_before: typing.Optional[dt.datetime]. If provided, only objects synced by Merge before this date time will be returned.

            - page_size: typing.Optional[int]. Number of results to return per page.

            - parent_ticket_id: typing.Optional[str]. If provided, will only return sub tickets of the parent_ticket_id.

            - priority: typing.Optional[TicketsListRequestPriority]. If provided, will only return tickets of this priority.

                                                                     * `URGENT` - URGENT
                                                                     * `HIGH` - HIGH
                                                                     * `NORMAL` - NORMAL
                                                                     * `LOW` - LOW
            - project_id: typing.Optional[str]. If provided, will only return tickets for this project.

            - remote_created_after: typing.Optional[dt.datetime]. If provided, will only return tickets created in the third party platform after this datetime.

            - remote_created_before: typing.Optional[dt.datetime]. If provided, will only return tickets created in the third party platform before this datetime.

            - remote_fields: typing.Optional[TicketsListRequestRemoteFields]. Deprecated. Use show_enum_origins.

            - remote_id: typing.Optional[str]. The API provider's ID for the given object.

            - remote_updated_after: typing.Optional[dt.datetime]. If provided, will only return tickets updated in the third party platform after this datetime.

            - remote_updated_before: typing.Optional[dt.datetime]. If provided, will only return tickets updated in the third party platform before this datetime.

            - show_enum_origins: typing.Optional[TicketsListRequestShowEnumOrigins]. Which fields should be returned in non-normalized form.

            - status: typing.Optional[TicketsListRequestStatus]. If provided, will only return tickets of this status.

                                                                 * `OPEN` - OPEN
                                                                 * `CLOSED` - CLOSED
                                                                 * `IN_PROGRESS` - IN_PROGRESS
                                                                 * `ON_HOLD` - ON_HOLD
            - tags: typing.Optional[str]. If provided, will only return tickets matching the tags; multiple tags can be separated by commas.

            - ticket_type: typing.Optional[str]. If provided, will only return tickets of this type.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets"),
            params=remove_none_from_dict(
                {
                    "account_id": account_id,
                    "assignee_ids": assignee_ids,
                    "collection_ids": collection_ids,
                    "completed_after": serialize_datetime(completed_after) if completed_after is not None else None,
                    "completed_before": serialize_datetime(completed_before) if completed_before is not None else None,
                    "contact_id": contact_id,
                    "created_after": serialize_datetime(created_after) if created_after is not None else None,
                    "created_before": serialize_datetime(created_before) if created_before is not None else None,
                    "cursor": cursor,
                    "due_after": serialize_datetime(due_after) if due_after is not None else None,
                    "due_before": serialize_datetime(due_before) if due_before is not None else None,
                    "expand": expand,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "include_remote_fields": include_remote_fields,
                    "modified_after": serialize_datetime(modified_after) if modified_after is not None else None,
                    "modified_before": serialize_datetime(modified_before) if modified_before is not None else None,
                    "page_size": page_size,
                    "parent_ticket_id": parent_ticket_id,
                    "priority": priority,
                    "project_id": project_id,
                    "remote_created_after": serialize_datetime(remote_created_after)
                    if remote_created_after is not None
                    else None,
                    "remote_created_before": serialize_datetime(remote_created_before)
                    if remote_created_before is not None
                    else None,
                    "remote_fields": remote_fields,
                    "remote_id": remote_id,
                    "remote_updated_after": serialize_datetime(remote_updated_after)
                    if remote_updated_after is not None
                    else None,
                    "remote_updated_before": serialize_datetime(remote_updated_before)
                    if remote_updated_before is not None
                    else None,
                    "show_enum_origins": show_enum_origins,
                    "status": status,
                    "tags": tags,
                    "ticket_type": ticket_type,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedTicketList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        model: TicketRequest,
    ) -> TicketResponse:
        """
        Creates a `Ticket` object with the given values.

        Parameters:
            - is_debug_mode: typing.Optional[bool]. Whether to include debug fields (such as log file links) in the response.

            - run_async: typing.Optional[bool]. Whether or not third-party updates should be run asynchronously.

            - model: TicketRequest.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets"),
            params=remove_none_from_dict({"is_debug_mode": is_debug_mode, "run_async": run_async}),
            json=jsonable_encoder({"model": model}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TicketResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self,
        id: str,
        *,
        expand: typing.Optional[TicketsRetrieveRequestExpand] = None,
        include_remote_data: typing.Optional[bool] = None,
        include_remote_fields: typing.Optional[bool] = None,
        remote_fields: typing.Optional[TicketsRetrieveRequestRemoteFields] = None,
        show_enum_origins: typing.Optional[TicketsRetrieveRequestShowEnumOrigins] = None,
    ) -> Ticket:
        """
        Returns a `Ticket` object with the given `id`.

        Parameters:
            - id: str.

            - expand: typing.Optional[TicketsRetrieveRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - include_remote_fields: typing.Optional[bool]. Whether to include all remote fields, including fields that Merge did not map to common models, in a normalized format.

            - remote_fields: typing.Optional[TicketsRetrieveRequestRemoteFields]. Deprecated. Use show_enum_origins.

            - show_enum_origins: typing.Optional[TicketsRetrieveRequestShowEnumOrigins]. Which fields should be returned in non-normalized form.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/{id}"),
            params=remove_none_from_dict(
                {
                    "expand": expand,
                    "include_remote_data": include_remote_data,
                    "include_remote_fields": include_remote_fields,
                    "remote_fields": remote_fields,
                    "show_enum_origins": show_enum_origins,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Ticket, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def partial_update(
        self,
        id: str,
        *,
        is_debug_mode: typing.Optional[bool] = None,
        run_async: typing.Optional[bool] = None,
        model: PatchedTicketRequest,
    ) -> TicketResponse:
        """
        Updates a `Ticket` object with the given `id`.

        Parameters:
            - id: str.

            - is_debug_mode: typing.Optional[bool]. Whether to include debug fields (such as log file links) in the response.

            - run_async: typing.Optional[bool]. Whether or not third-party updates should be run asynchronously.

            - model: PatchedTicketRequest.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/{id}"),
            params=remove_none_from_dict({"is_debug_mode": is_debug_mode, "run_async": run_async}),
            json=jsonable_encoder({"model": model}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TicketResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def collaborators_list(
        self,
        parent_id: str,
        *,
        cursor: typing.Optional[str] = None,
        expand: typing.Optional[TicketsCollaboratorsListRequestExpand] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        page_size: typing.Optional[int] = None,
    ) -> PaginatedUserList:
        """
        Returns a list of `User` objects.

        Parameters:
            - parent_id: str.

            - cursor: typing.Optional[str]. The pagination cursor value.

            - expand: typing.Optional[TicketsCollaboratorsListRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - page_size: typing.Optional[int]. Number of results to return per page.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/{parent_id}/collaborators"),
            params=remove_none_from_dict(
                {
                    "cursor": cursor,
                    "expand": expand,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "page_size": page_size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedUserList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def meta_patch_retrieve(self, id: str) -> MetaResponse:
        """
        Returns metadata for `Ticket` PATCHs.

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/ticketing/v1/tickets/meta/patch/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MetaResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def meta_post_retrieve(self) -> MetaResponse:
        """
        Returns metadata for `Ticket` POSTs.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets/meta/post"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MetaResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remote_field_classes_list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        page_size: typing.Optional[int] = None,
    ) -> PaginatedRemoteFieldClassList:
        """
        Returns a list of `RemoteFieldClass` objects.

        Parameters:
            - cursor: typing.Optional[str]. The pagination cursor value.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - page_size: typing.Optional[int]. Number of results to return per page.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/ticketing/v1/tickets/remote-field-classes"),
            params=remove_none_from_dict(
                {
                    "cursor": cursor,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "page_size": page_size,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedRemoteFieldClassList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
