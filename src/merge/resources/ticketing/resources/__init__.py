# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import (
        account_details,
        account_token,
        accounts,
        async_passthrough,
        attachments,
        audit_trail,
        available_actions,
        collections,
        comments,
        contacts,
        delete_account,
        field_mapping,
        force_resync,
        generate_key,
        issues,
        link_token,
        linked_accounts,
        passthrough,
        projects,
        regenerate_key,
        roles,
        scopes,
        sync_status,
        tags,
        teams,
        tickets,
        users,
        webhook_receivers,
    )
    from .async_passthrough import AsyncPassthroughRetrieveResponse
    from .collections import CollectionsViewersListRequestExpand
    from .comments import CommentsListRequestExpand, CommentsRetrieveRequestExpand
    from .issues import IssuesListRequestStatus
    from .link_token import EndUserDetailsRequestLanguage
    from .linked_accounts import LinkedAccountsListRequestCategory
    from .projects import ProjectsUsersListRequestExpand
    from .tickets import (
        TicketsListRequestExpand,
        TicketsListRequestPriority,
        TicketsListRequestRemoteFields,
        TicketsListRequestShowEnumOrigins,
        TicketsRetrieveRequestExpand,
        TicketsRetrieveRequestRemoteFields,
        TicketsRetrieveRequestShowEnumOrigins,
        TicketsViewersListRequestExpand,
    )
    from .users import UsersListRequestExpand, UsersRetrieveRequestExpand
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncPassthroughRetrieveResponse": ".async_passthrough",
    "CollectionsViewersListRequestExpand": ".collections",
    "CommentsListRequestExpand": ".comments",
    "CommentsRetrieveRequestExpand": ".comments",
    "EndUserDetailsRequestLanguage": ".link_token",
    "IssuesListRequestStatus": ".issues",
    "LinkedAccountsListRequestCategory": ".linked_accounts",
    "ProjectsUsersListRequestExpand": ".projects",
    "TicketsListRequestExpand": ".tickets",
    "TicketsListRequestPriority": ".tickets",
    "TicketsListRequestRemoteFields": ".tickets",
    "TicketsListRequestShowEnumOrigins": ".tickets",
    "TicketsRetrieveRequestExpand": ".tickets",
    "TicketsRetrieveRequestRemoteFields": ".tickets",
    "TicketsRetrieveRequestShowEnumOrigins": ".tickets",
    "TicketsViewersListRequestExpand": ".tickets",
    "UsersListRequestExpand": ".users",
    "UsersRetrieveRequestExpand": ".users",
    "account_details": ".",
    "account_token": ".",
    "accounts": ".",
    "async_passthrough": ".",
    "attachments": ".",
    "audit_trail": ".",
    "available_actions": ".",
    "collections": ".",
    "comments": ".",
    "contacts": ".",
    "delete_account": ".",
    "field_mapping": ".",
    "force_resync": ".",
    "generate_key": ".",
    "issues": ".",
    "link_token": ".",
    "linked_accounts": ".",
    "passthrough": ".",
    "projects": ".",
    "regenerate_key": ".",
    "roles": ".",
    "scopes": ".",
    "sync_status": ".",
    "tags": ".",
    "teams": ".",
    "tickets": ".",
    "users": ".",
    "webhook_receivers": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncPassthroughRetrieveResponse",
    "CollectionsViewersListRequestExpand",
    "CommentsListRequestExpand",
    "CommentsRetrieveRequestExpand",
    "EndUserDetailsRequestLanguage",
    "IssuesListRequestStatus",
    "LinkedAccountsListRequestCategory",
    "ProjectsUsersListRequestExpand",
    "TicketsListRequestExpand",
    "TicketsListRequestPriority",
    "TicketsListRequestRemoteFields",
    "TicketsListRequestShowEnumOrigins",
    "TicketsRetrieveRequestExpand",
    "TicketsRetrieveRequestRemoteFields",
    "TicketsRetrieveRequestShowEnumOrigins",
    "TicketsViewersListRequestExpand",
    "UsersListRequestExpand",
    "UsersRetrieveRequestExpand",
    "account_details",
    "account_token",
    "accounts",
    "async_passthrough",
    "attachments",
    "audit_trail",
    "available_actions",
    "collections",
    "comments",
    "contacts",
    "delete_account",
    "field_mapping",
    "force_resync",
    "generate_key",
    "issues",
    "link_token",
    "linked_accounts",
    "passthrough",
    "projects",
    "regenerate_key",
    "roles",
    "scopes",
    "sync_status",
    "tags",
    "teams",
    "tickets",
    "users",
    "webhook_receivers",
]
