# This file was auto-generated by Fern. It is not intended for manual modification.

from __future__ import annotations

import logging
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .agent import AssuranceAgent
from .errors import RefreshFailureError

# Set up a logger for this module
logger = logging.getLogger(__name__)

# Define the precise shapes of the callback functions for clarity and type safety.
OnSuccessCallback = typing.Callable[[str], None]
"""A callback function executed upon successful credential refresh."""

OnFailureCallback = typing.Callable[[str, RefreshFailureError], None]
"""A callback function executed upon final failure of a credential refresh."""


class RemediationClient:
    """
    Client for managing Merge's native SDK remediation features.
    Accessed via `merge_client.remediation`.
    """

    def __init__(self, *, client_wrapper: SyncClientWrapper) -> None:
        self._client_wrapper = client_wrapper
        self._active_agent: typing.Optional[AssuranceAgent] = None

    def enable_assurance(
        self,
        *,
        on_success: typing.Optional[OnSuccessCallback] = None,
        on_failure: typing.Optional[OnFailureCallback] = None,
        check_interval_seconds: int = 3600,
        expiry_threshold_days: int = 30,
    )-> "AssuranceAgent":
        """
        Configures and activates the "Merge Assurance" agent.

        This method initializes and starts a background agent within the
        application's process that proactively monitors and refreshes expiring
        credentials (account tokens) before they can cause an outage.

        Parameters:
            on_success: Optional callback executed when a token is successfully refreshed.
            on_failure: Optional callback executed when a token refresh fails after all retries.
            check_interval_seconds: The interval in seconds for checking token expiry. Defaults to 1 hour.
            expiry_threshold_days: The window in days to consider a token "expiring". Defaults to 30 days.

        Returns:
            An instance of the running AssuranceAgent, which provides a `shutdown()` method
            for graceful termination.
        """
        if self._active_agent and self._active_agent.is_running():
            logger.warning("Assurance Agent is already running. Returning existing instance.")
            return self._active_agent

        if check_interval_seconds <= 0 or expiry_threshold_days <= 0:
            raise ValueError("Intervals and thresholds must be positive values.")

        logger.info({"message": "Enabling Merge Assurance Agent.", "component": "AssuranceAgent"})
        agent = AssuranceAgent(
            client_wrapper=self._client_wrapper,
            on_success=on_success,
            on_failure=on_failure,
            check_interval_seconds=check_interval_seconds,
            expiry_threshold_days=expiry_threshold_days
        )
        agent.start()
        self._active_agent = agent
        return agent


class AsyncRemediationClient:
    """
    Async client for managing Merge's native SDK remediation features.
    Accessed via `async_merge_client.remediation`.
    """

    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def enable_assurance(
        self,
        *,
        on_success: typing.Optional[OnSuccessCallback] = None,
        on_failure: typing.Optional[OnFailureCallback] = None,
        check_interval_seconds: int = 3600,
        expiry_threshold_days: int = 30,
    ) -> "AssuranceAgent":
        """
        Configures and activates the async "Merge Assurance" agent.
        """
        logger.warning("AsyncRemediationClient is a placeholder and not fully implemented.")
        raise NotImplementedError("Async Assurance Agent is not yet implemented.")